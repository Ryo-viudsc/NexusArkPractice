{"ast":null,"code":"import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import React,{useState}from'react';import CustomButton from'../../custom-button/custom-button.component';import CartItem from'../../cart-item/cart-item.component';import'./cart-dropdown.styles.scss';import{connect}from'react-redux';import{selectCartItems}from'../../../redux/cart/cart.selectors';import{createStructuredSelector}from'reselect';import{withRouter}from'react-router-dom';import{toggleCartHidden}from'../../../redux/cart/cart.actions';//https://jsfiddle.net/sergdenisov/3dyxb5g4/1/\n//destructure the cartItems from the props of the current component\nvar CartDropdown=function CartDropdown(_ref){var cartItems=_ref.cartItems,history=_ref.history,dispatch=_ref.dispatch;return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsxs(\"div\",{className:\"cart-dropdown\",children:[/*#__PURE__*/_jsx(CustomButton,{className:\"checkout-button\",onClick:function onClick(){history.push('/checkout');dispatch(toggleCartHidden());},children:\"CHECKOUT\"}),/*#__PURE__*/_jsx(\"div\",{className:\"cart-items\"}),cartItems.length?cartItems.map(function(cartItem){return/*#__PURE__*/_jsx(CartItem,{item:cartItem},cartItem.id);}):/*#__PURE__*/_jsx(\"span\",{className:\"emtpy-message\",children:\"Your cart is empty\"}),/*#__PURE__*/_jsx(\"div\",{onClick:function onClick(){dispatch(toggleCartHidden());},className:\"close-dropdown\",children:\"CLOSE \\u2715\"})]})});};//this way, cart dropdown component \n//won't get re-rendered whenever some changes that are unrelated to the cart component happens \nvar mapStateToProps=createStructuredSelector({cartItems:selectCartItems});//reselect is literary \"reselecting\" the existing variable \n//and re-use it instead of calucating multiple times \n//OR \n// const mapStateToProps = state =>({\n//     cartItems : state.cart.cartItems\n// })\n//NOTE: but this one gets re-render everytime the state changes \nexport default withRouter(connect(mapStateToProps)(CartDropdown));//if we don't supply the second argument, \n//connect atcually passes the dispatch into the prop","map":{"version":3,"sources":["C:/Users/bskki/AWSamp_GraphQL Udemy/crwn-clothing/client/src/components/cart/cart-dropdown/cart-dropdown.component.jsx"],"names":["React","useState","CustomButton","CartItem","connect","selectCartItems","createStructuredSelector","withRouter","toggleCartHidden","CartDropdown","cartItems","history","dispatch","push","length","map","cartItem","id","mapStateToProps"],"mappings":"6IAAA,MAAOA,CAAAA,KAAP,EAAeC,QAAf,KAA8B,OAA9B,CACA,MAAOC,CAAAA,YAAP,KAAyB,6CAAzB,CACA,MAAOC,CAAAA,QAAP,KAAqB,qCAArB,CACA,MAAO,6BAAP,CACA,OAAQC,OAAR,KAAsB,aAAtB,CACA,OAAQC,eAAR,KAA8B,oCAA9B,CACA,OAAQC,wBAAR,KAAuC,UAAvC,CACA,OAAQC,UAAR,KAAyB,kBAAzB,CACA,OAAQC,gBAAR,KAA+B,kCAA/B,CAGA;AACA;AACA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,MAAoC,IAAlCC,CAAAA,SAAkC,MAAlCA,SAAkC,CAAvBC,OAAuB,MAAvBA,OAAuB,CAAdC,QAAc,MAAdA,QAAc,CAEvD,mBACE,sCACA,aAAK,SAAS,CAAC,eAAf,wBACA,KAAC,YAAD,EACc,SAAS,CAAC,iBADxB,CAEc,OAAO,CAAE,kBAAI,CACbD,OAAO,CAACE,IAAR,CAAa,WAAb,EACAD,QAAQ,CAACJ,gBAAgB,EAAjB,CAAR,CACX,CALH,sBADA,cASE,YAAK,SAAS,CAAC,YAAf,EATF,CAWIE,SAAS,CAACI,MAAV,CACCJ,SAAS,CAACK,GAAV,CAAc,SAAAC,QAAQ,qBACrB,KAAC,QAAD,EAA4B,IAAI,CAAEA,QAAlC,EAAeA,QAAQ,CAACC,EAAxB,CADqB,EAAtB,CADD,cAKA,aAAM,SAAS,CAAC,eAAhB,gCAhBJ,cAkBK,YACG,OAAO,CAAE,kBAAI,CACXL,QAAQ,CAACJ,gBAAgB,EAAjB,CAAR,CAA6B,CAFlC,CAGG,SAAS,CAAC,gBAHb,0BAlBL,GADA,EADF,CA+BD,CAjCD,CAmCA;AACA;AACA,GAAMU,CAAAA,eAAe,CAAGZ,wBAAwB,CAAC,CAC/CI,SAAS,CAAGL,eADmC,CAAD,CAAhD,CAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA,cAAeE,CAAAA,UAAU,CAACH,OAAO,CAACc,eAAD,CAAP,CAAyBT,YAAzB,CAAD,CAAzB,CACA;AACA","sourcesContent":["import React, {useState} from 'react';\r\nimport CustomButton from '../../custom-button/custom-button.component';\r\nimport CartItem from '../../cart-item/cart-item.component';\r\nimport './cart-dropdown.styles.scss';\r\nimport {connect} from 'react-redux';\r\nimport {selectCartItems} from '../../../redux/cart/cart.selectors';\r\nimport {createStructuredSelector} from 'reselect';\r\nimport {withRouter} from 'react-router-dom';\r\nimport {toggleCartHidden} from '../../../redux/cart/cart.actions';\r\n\r\n\r\n//https://jsfiddle.net/sergdenisov/3dyxb5g4/1/\r\n//destructure the cartItems from the props of the current component\r\nconst CartDropdown = ({cartItems, history, dispatch}) => {\r\n\r\n  return(\r\n    <>\r\n    <div className='cart-dropdown'>\r\n    <CustomButton \r\n                  className='checkout-button'\r\n                  onClick={()=>{\r\n                  history.push('/checkout');\r\n                  dispatch(toggleCartHidden());\r\n      }}> \r\n      CHECKOUT</CustomButton>\r\n \r\n      <div className='cart-items' />\r\n      {\r\n        cartItems.length ? \r\n        (cartItems.map(cartItem => (\r\n          <CartItem key={cartItem.id} item={cartItem}/>\r\n          )))\r\n        : \r\n        <span className='emtpy-message'>Your cart is empty</span>  \r\n      } \r\n         <div  \r\n            onClick={()=>{\r\n              dispatch(toggleCartHidden())}}\r\n            className='close-dropdown' > \r\n              CLOSE &#10005;\r\n          </div>\r\n   \r\n    </div>\r\n\r\n    </>\r\n    )\r\n}\r\n\r\n//this way, cart dropdown component \r\n//won't get re-rendered whenever some changes that are unrelated to the cart component happens \r\nconst mapStateToProps = createStructuredSelector({\r\n  cartItems : selectCartItems\r\n}) \r\n//reselect is literary \"reselecting\" the existing variable \r\n//and re-use it instead of calucating multiple times \r\n\r\n//OR \r\n// const mapStateToProps = state =>({\r\n//     cartItems : state.cart.cartItems\r\n// })\r\n//NOTE: but this one gets re-render everytime the state changes \r\n\r\nexport default withRouter(connect(mapStateToProps)(CartDropdown)); \r\n//if we don't supply the second argument, \r\n//connect atcually passes the dispatch into the prop \r\n"]},"metadata":{},"sourceType":"module"}