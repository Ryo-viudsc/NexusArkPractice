{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\bskki\\\\AWSamp_GraphQL Udemy\\\\crwn-clothing\\\\src\\\\App.js\";\nimport React from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport HomePage from './pages/homepage/homepage.component';\nimport ShopPage from './pages/shop/shop.component';\nimport CheckoutPage from './pages/checkout/checkout.component';\nimport SignInAndSignUpPage from './pages/sign-in-and-sign-up/sign-in-and-sign-up';\nimport Header from './components/header/header.component';\nimport { auth, createUserProfileDocument } from \"./firebase/firebase.utils\";\nimport { addCollectionAndDocuments } from './'; // import { SnapshotViewIOS } from 'react-native';\n//we wanna use auth credentials through this root \n\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect'; //we want action to pass into dispatch / setCurrentUser is action object that accepts the payload and return the actionType\n\nimport { setCurrentUser } from './redux/user/user.actions';\nimport { selectCurrentUser } from './redux/user/user.selector';\nimport { selectCollectionsForPreview } from './redux/shop/shop.selectors';\nimport styled from 'styled-components'; // const Text = styled.div`\n//border : ${({isActive}) => isActive ? `1px` : `3px green border`}\n// `;\n//inside, write <Text isActive> </Text>\n//notice that Header is outside of the Switch \n//this way, react router doesn't have to re-render \n//everytime the switch is executed\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.unsubscribeFromAuth = null;\n  }\n\n  //the purpose of this whole componentdidMount is \n  //to use the userAuth object to query the userdata in the database \n  componentDidMount() {\n    const {\n      setCurrentUser\n    } = this.props;\n    this.unsubscribeFromAuth = auth.onAuthStateChanged(async userAuth => {\n      if (userAuth) {\n        const userRef = await createUserProfileDocument(userAuth); //to check if the database has any updates in the userAuth\n        //you need the onsnapShot to listen to \n        //the update of the database \n        //for the comopnentDidMount of the entire app\n\n        userRef.onSnapshot(snapShot => {\n          setCurrentUser({\n            id: snapShot.id,\n            ...snapShot.data()\n          }); //firebase gives you ref object no matter what \n        }); //end of if(userAuth) we also want to know \n        //if the user is sign-ined in or not as well \n      } else {\n        setCurrentUser(userAuth); //then current user is null \n      }\n    });\n  }\n\n  componentWillUnmount() {\n    this.unsubscribeFromAuth();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Switch, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/\",\n          component: HomePage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 8\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/shop\",\n          component: ShopPage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 8\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/checkout\",\n          component: CheckoutPage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 8\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/signin\",\n          render: () => this.props.currentUser ? /*#__PURE__*/_jsxDEV(Redirect, {\n            to: \"/\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 27\n          }, this) : /*#__PURE__*/_jsxDEV(SignInAndSignUpPage, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 27\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 8\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 6\n    }, this);\n  }\n\n} //without \"exact\" keyword, \n//if that is just path\n//then anything starts with '/', \n//it also gets rendered \n\n\nconst mapStateToProps = createStructuredSelector({\n  currentUser: selectCurrentUser\n}); //dispatch accepts the actionState with payload(user)\n//fire off the reducer accoring to the action.type\n//user parameter will be whatever \n//setCurrentUser will accept as paramter like setCurrentUser(param)\n\nconst mapDispatchToProps = dispatch => ({\n  setCurrentUser: user => dispatch(setCurrentUser(user))\n}); //remember set currrent user looks like this\n// export const setCurrentUser = user => ({\n//   type: 'SET_CURRENT_USER',\n//   payload: user\n// });\n///////////////////////////////////////////////\n//also in the root reducer file\n// import userReducer from './user/user.reducer';\n// export default combineReducers({\n//   user: userReducer\n// });\n/////dispatch/////////////////////////////////////////\n// const userReducer = (state = INITIAL_STATE, action) => {\n//   switch (action.type) {\n//     case 'SET_CURRENT_USER':\n//       return {\n//         ...state,\n//         currentUser: action.payload\n//       };\n//     default:\n//       return state;\n//   }\n// };\n//in this app component, we don't need the state so \n//there's no need to put the mapStateToProps\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["C:/Users/bskki/AWSamp_GraphQL Udemy/crwn-clothing/src/App.js"],"names":["React","Switch","Route","Redirect","HomePage","ShopPage","CheckoutPage","SignInAndSignUpPage","Header","auth","createUserProfileDocument","addCollectionAndDocuments","connect","createStructuredSelector","setCurrentUser","selectCurrentUser","selectCollectionsForPreview","styled","App","Component","unsubscribeFromAuth","componentDidMount","props","onAuthStateChanged","userAuth","userRef","onSnapshot","snapShot","id","data","componentWillUnmount","render","currentUser","mapStateToProps","mapDispatchToProps","dispatch","user"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nimport {  Switch, Route, Redirect } from 'react-router-dom';\r\nimport HomePage from './pages/homepage/homepage.component';\r\nimport ShopPage from './pages/shop/shop.component';\r\nimport CheckoutPage from './pages/checkout/checkout.component';\r\nimport SignInAndSignUpPage from './pages/sign-in-and-sign-up/sign-in-and-sign-up';\r\nimport Header from './components/header/header.component';\r\nimport {auth, createUserProfileDocument} from \"./firebase/firebase.utils\";\r\nimport {addCollectionAndDocuments} from './'\r\n// import { SnapshotViewIOS } from 'react-native';\r\n//we wanna use auth credentials through this root \r\nimport { connect } from 'react-redux';\r\nimport {createStructuredSelector} from 'reselect';\r\n\r\n\r\n//we want action to pass into dispatch / setCurrentUser is action object that accepts the payload and return the actionType\r\nimport { setCurrentUser } from './redux/user/user.actions';\r\nimport { selectCurrentUser } from './redux/user/user.selector';\r\nimport { selectCollectionsForPreview } from './redux/shop/shop.selectors';\r\nimport styled from 'styled-components';\r\n\r\n// const Text = styled.div`\r\n    //border : ${({isActive}) => isActive ? `1px` : `3px green border`}\r\n// `;\r\n//inside, write <Text isActive> </Text>\r\n\r\n\r\n//notice that Header is outside of the Switch \r\n//this way, react router doesn't have to re-render \r\n//everytime the switch is executed\r\nclass App extends React.Component {\r\n  unsubscribeFromAuth = null;\r\n  \r\n  //the purpose of this whole componentdidMount is \r\n  //to use the userAuth object to query the userdata in the database \r\n  componentDidMount() {\r\n\r\n    const {setCurrentUser} = this.props;\r\n\r\n    this.unsubscribeFromAuth = auth.onAuthStateChanged(async userAuth => {\r\n      \r\n      if(userAuth){\r\n        const userRef = await createUserProfileDocument(userAuth);\r\n        //to check if the database has any updates in the userAuth\r\n\r\n        //you need the onsnapShot to listen to \r\n        //the update of the database \r\n        //for the comopnentDidMount of the entire app\r\n         userRef.onSnapshot(snapShot => {\r\n          setCurrentUser({\r\n                id : snapShot.id,\r\n                ...snapShot.data()\r\n          });\r\n           //firebase gives you ref object no matter what \r\n        });\r\n       //end of if(userAuth) we also want to know \r\n       //if the user is sign-ined in or not as well \r\n      }else{\r\n              setCurrentUser(userAuth);\r\n                //then current user is null \r\n      }\r\n    });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.unsubscribeFromAuth();\r\n  }\r\n \r\n\r\n  render(){\r\n    return (\r\n     <div> \r\n      <Header />\r\n      <Switch>\r\n       <Route exact path='/' component={HomePage} />\r\n       <Route path='/shop' component={ShopPage} />\r\n       <Route exact path='/checkout' component={CheckoutPage} />\r\n       <Route exact path='/signin' \r\n               render={() => \r\n                       this.props.currentUser\r\n                       ? (<Redirect to='/' />)\r\n                       : (<SignInAndSignUpPage />)} />\r\n       </Switch>\r\n     </div>\r\n   )}\r\n}\r\n//without \"exact\" keyword, \r\n//if that is just path\r\n//then anything starts with '/', \r\n//it also gets rendered \r\n\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    currentUser: selectCurrentUser\r\n});\r\n\r\n//dispatch accepts the actionState with payload(user)\r\n//fire off the reducer accoring to the action.type\r\n//user parameter will be whatever \r\n//setCurrentUser will accept as paramter like setCurrentUser(param)\r\nconst mapDispatchToProps = dispatch => ({\r\n  setCurrentUser: user => dispatch(setCurrentUser(user))\r\n});\r\n\r\n//remember set currrent user looks like this\r\n// export const setCurrentUser = user => ({\r\n//   type: 'SET_CURRENT_USER',\r\n//   payload: user\r\n// });\r\n///////////////////////////////////////////////\r\n//also in the root reducer file\r\n// import userReducer from './user/user.reducer';\r\n// export default combineReducers({\r\n//   user: userReducer\r\n// });\r\n/////dispatch/////////////////////////////////////////\r\n\r\n// const userReducer = (state = INITIAL_STATE, action) => {\r\n//   switch (action.type) {\r\n//     case 'SET_CURRENT_USER':\r\n//       return {\r\n//         ...state,\r\n//         currentUser: action.payload\r\n//       };\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n\r\n\r\n\r\n//in this app component, we don't need the state so \r\n//there's no need to put the mapStateToProps\r\nexport default connect(mapStateToProps,mapDispatchToProps)(App);"]},"metadata":{},"sourceType":"module"}