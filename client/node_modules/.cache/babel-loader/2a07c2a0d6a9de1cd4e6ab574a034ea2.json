{"ast":null,"code":"import ShopActionTypes from './shop.types';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\nexport const fetchCollectionsStart = () => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_START\n});\nexport const fetchCollectionsSuccess = collectionsMap => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_SUCCESS,\n  payload: collectionsMap\n});\nexport const fetchCollectionsFailure = errorMessage => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_FAILURE,\n  payload: errorMessage\n}); //all thunks are similar to mapDispatchToProps \n//meaning it is a function that accepts the action function \n//and the action function accepts theaction object \n//when the thunk is fired off, \n// it invokes the dispatch with the action function and the action object \n\nexport const fetchCollectionsStartAsync = () => {\n  return dispatch => {\n    const collectionRef = firestore.collection('collections');\n    dispatch(fetchCollectionsStart());\n    collectionRef.get().then(snapshot => {\n      const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n      dispatch(fetchCollectionsSuccess(collectionsMap));\n      console.log(\"==========>>>><<<===========\");\n      console.log(collectionsMap);\n    }).catch(error => dispatch(fetchCollectionsFailure(error.message)));\n  };\n}; //about onSnapShot method \n// ALTERNATIVE METHOD : : onSnapshot method \n// The listener can be cancelled by calling the function that is returned when onSnapshot is called.\n// @return\n// An unsubscribe function that can be called to cancel the snapshot listener.\n//","map":{"version":3,"sources":["C:/Users/bskki/AWSamp_GraphQL Udemy/crwn-clothing/client/src/redux/shop/shop.actions.js"],"names":["ShopActionTypes","firestore","convertCollectionsSnapshotToMap","fetchCollectionsStart","type","FETCH_COLLECTIONS_START","fetchCollectionsSuccess","collectionsMap","FETCH_COLLECTIONS_SUCCESS","payload","fetchCollectionsFailure","errorMessage","FETCH_COLLECTIONS_FAILURE","fetchCollectionsStartAsync","dispatch","collectionRef","collection","get","then","snapshot","console","log","catch","error","message"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,cAA5B;AACA,SAAQC,SAAR,EAAmBC,+BAAnB,QAAyD,+BAAzD;AAEA,OAAO,MAAMC,qBAAqB,GAAG,OAAO;AAC1CC,EAAAA,IAAI,EAAEJ,eAAe,CAACK;AADoB,CAAP,CAA9B;AAIP,OAAO,MAAMC,uBAAuB,GAAGC,cAAc,KAAK;AACxDH,EAAAA,IAAI,EAAEJ,eAAe,CAACQ,yBADkC;AAExDC,EAAAA,OAAO,EAAEF;AAF+C,CAAL,CAA9C;AAKP,OAAO,MAAMG,uBAAuB,GAAGC,YAAY,KAAK;AACtDP,EAAAA,IAAI,EAAEJ,eAAe,CAACY,yBADgC;AAEtDH,EAAAA,OAAO,EAAEE;AAF6C,CAAL,CAA5C,C,CAMP;AACA;AACA;AACA;AACA;;AAGA,OAAO,MAAME,0BAA0B,GAAG,MAAM;AAC9C,SAAOC,QAAQ,IAAI;AACjB,UAAMC,aAAa,GAAGd,SAAS,CAACe,UAAV,CAAqB,aAArB,CAAtB;AACAF,IAAAA,QAAQ,CAACX,qBAAqB,EAAtB,CAAR;AAEAY,IAAAA,aAAa,CACVE,GADH,GAEGC,IAFH,CAEQC,QAAQ,IAAI;AAChB,YAAMZ,cAAc,GAAGL,+BAA+B,CAACiB,QAAD,CAAtD;AACAL,MAAAA,QAAQ,CAACR,uBAAuB,CAACC,cAAD,CAAxB,CAAR;AACAa,MAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYd,cAAZ;AACD,KAPH,EAQGe,KARH,CAQSC,KAAK,IAAIT,QAAQ,CAACJ,uBAAuB,CAACa,KAAK,CAACC,OAAP,CAAxB,CAR1B;AASD,GAbD;AAcD,CAfM,C,CAiBP;AACE;AACI;AACA;AACA;AACA","sourcesContent":["import ShopActionTypes from './shop.types';\r\nimport {firestore, convertCollectionsSnapshotToMap} from '../../firebase/firebase.utils';\r\n\r\nexport const fetchCollectionsStart = () => ({\r\n  type: ShopActionTypes.FETCH_COLLECTIONS_START\r\n});\r\n\r\nexport const fetchCollectionsSuccess = collectionsMap => ({\r\n  type: ShopActionTypes.FETCH_COLLECTIONS_SUCCESS,\r\n  payload: collectionsMap\r\n});\r\n\r\nexport const fetchCollectionsFailure = errorMessage => ({\r\n  type: ShopActionTypes.FETCH_COLLECTIONS_FAILURE,\r\n  payload: errorMessage\r\n});\r\n\r\n\r\n//all thunks are similar to mapDispatchToProps \r\n//meaning it is a function that accepts the action function \r\n//and the action function accepts theaction object \r\n//when the thunk is fired off, \r\n// it invokes the dispatch with the action function and the action object \r\n\r\n\r\nexport const fetchCollectionsStartAsync = () => {\r\n  return dispatch => {\r\n    const collectionRef = firestore.collection('collections');\r\n    dispatch(fetchCollectionsStart());\r\n\r\n    collectionRef\r\n      .get()\r\n      .then(snapshot => {\r\n        const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\r\n        dispatch(fetchCollectionsSuccess(collectionsMap));\r\n        console.log(\"==========>>>><<<===========\");\r\n        console.log(collectionsMap)\r\n      })\r\n      .catch(error => dispatch(fetchCollectionsFailure(error.message)));\r\n  };\r\n};\r\n\r\n//about onSnapShot method \r\n  // ALTERNATIVE METHOD : : onSnapshot method \r\n      // The listener can be cancelled by calling the function that is returned when onSnapshot is called.\r\n      // @return\r\n      // An unsubscribe function that can be called to cancel the snapshot listener.\r\n      //   "]},"metadata":{},"sourceType":"module"}