{"ast":null,"code":"import ShopActionTypes from'./shop.types';import{firestore,convertCollectionsSnapshotToMap}from'../../firebase/firebase.utils';export var fetchCollectionsStart=function fetchCollectionsStart(){return{type:ShopActionTypes.FETCH_COLLECTIONS_START};};export var fetchCollectionsSuccess=function fetchCollectionsSuccess(collectionsMap){return{type:ShopActionTypes.FETCH_COLLECTIONS_SUCCESS,payload:collectionsMap};};export var fetchCollectionsFailure=function fetchCollectionsFailure(errorMessage){return{type:ShopActionTypes.FETCH_COLLECTIONS_FAILURE,payload:errorMessage};};//all thunks are similar to mapDispatchToProps \n//meaning it is a function that accepts the action function \n//and the action function accepts theaction object \n//when the thunk is fired off, \n// it invokes the dispatch with the action function and the action object \nexport var fetchCollectionsStartAsync=function fetchCollectionsStartAsync(){return function(dispatch){var collectionRef=firestore.collection('collections');dispatch(fetchCollectionsStart());collectionRef.get().then(function(snapshot){var collectionsMap=convertCollectionsSnapshotToMap(snapshot);dispatch(fetchCollectionsSuccess(collectionsMap));console.log(\"==========>>>><<<===========\");console.log(collectionsMap);}).catch(function(error){return dispatch(fetchCollectionsFailure(error.message));});};};//about onSnapShot method \n// ALTERNATIVE METHOD : : onSnapshot method \n// The listener can be cancelled by calling the function that is returned when onSnapshot is called.\n// @return\n// An unsubscribe function that can be called to cancel the snapshot listener.\n//","map":{"version":3,"sources":["C:/Users/bskki/AWSamp_GraphQL Udemy/crwn-clothing/client/src/redux/shop/shop.actions.js"],"names":["ShopActionTypes","firestore","convertCollectionsSnapshotToMap","fetchCollectionsStart","type","FETCH_COLLECTIONS_START","fetchCollectionsSuccess","collectionsMap","FETCH_COLLECTIONS_SUCCESS","payload","fetchCollectionsFailure","errorMessage","FETCH_COLLECTIONS_FAILURE","fetchCollectionsStartAsync","dispatch","collectionRef","collection","get","then","snapshot","console","log","catch","error","message"],"mappings":"AAAA,MAAOA,CAAAA,eAAP,KAA4B,cAA5B,CACA,OAAQC,SAAR,CAAmBC,+BAAnB,KAAyD,+BAAzD,CAEA,MAAO,IAAMC,CAAAA,qBAAqB,CAAG,QAAxBA,CAAAA,qBAAwB,SAAO,CAC1CC,IAAI,CAAEJ,eAAe,CAACK,uBADoB,CAAP,EAA9B,CAIP,MAAO,IAAMC,CAAAA,uBAAuB,CAAG,QAA1BA,CAAAA,uBAA0B,CAAAC,cAAc,QAAK,CACxDH,IAAI,CAAEJ,eAAe,CAACQ,yBADkC,CAExDC,OAAO,CAAEF,cAF+C,CAAL,EAA9C,CAKP,MAAO,IAAMG,CAAAA,uBAAuB,CAAG,QAA1BA,CAAAA,uBAA0B,CAAAC,YAAY,QAAK,CACtDP,IAAI,CAAEJ,eAAe,CAACY,yBADgC,CAEtDH,OAAO,CAAEE,YAF6C,CAAL,EAA5C,CAMP;AACA;AACA;AACA;AACA;AAGA,MAAO,IAAME,CAAAA,0BAA0B,CAAG,QAA7BA,CAAAA,0BAA6B,EAAM,CAC9C,MAAO,UAAAC,QAAQ,CAAI,CACjB,GAAMC,CAAAA,aAAa,CAAGd,SAAS,CAACe,UAAV,CAAqB,aAArB,CAAtB,CACAF,QAAQ,CAACX,qBAAqB,EAAtB,CAAR,CAEAY,aAAa,CACVE,GADH,GAEGC,IAFH,CAEQ,SAAAC,QAAQ,CAAI,CAChB,GAAMZ,CAAAA,cAAc,CAAGL,+BAA+B,CAACiB,QAAD,CAAtD,CACAL,QAAQ,CAACR,uBAAuB,CAACC,cAAD,CAAxB,CAAR,CACAa,OAAO,CAACC,GAAR,CAAY,8BAAZ,EACAD,OAAO,CAACC,GAAR,CAAYd,cAAZ,EACD,CAPH,EAQGe,KARH,CAQS,SAAAC,KAAK,QAAIT,CAAAA,QAAQ,CAACJ,uBAAuB,CAACa,KAAK,CAACC,OAAP,CAAxB,CAAZ,EARd,EASD,CAbD,CAcD,CAfM,CAiBP;AACE;AACI;AACA;AACA;AACA","sourcesContent":["import ShopActionTypes from './shop.types';\r\nimport {firestore, convertCollectionsSnapshotToMap} from '../../firebase/firebase.utils';\r\n\r\nexport const fetchCollectionsStart = () => ({\r\n  type: ShopActionTypes.FETCH_COLLECTIONS_START\r\n});\r\n\r\nexport const fetchCollectionsSuccess = collectionsMap => ({\r\n  type: ShopActionTypes.FETCH_COLLECTIONS_SUCCESS,\r\n  payload: collectionsMap\r\n});\r\n\r\nexport const fetchCollectionsFailure = errorMessage => ({\r\n  type: ShopActionTypes.FETCH_COLLECTIONS_FAILURE,\r\n  payload: errorMessage\r\n});\r\n\r\n\r\n//all thunks are similar to mapDispatchToProps \r\n//meaning it is a function that accepts the action function \r\n//and the action function accepts theaction object \r\n//when the thunk is fired off, \r\n// it invokes the dispatch with the action function and the action object \r\n\r\n\r\nexport const fetchCollectionsStartAsync = () => {\r\n  return dispatch => {\r\n    const collectionRef = firestore.collection('collections');\r\n    dispatch(fetchCollectionsStart());\r\n\r\n    collectionRef\r\n      .get()\r\n      .then(snapshot => {\r\n        const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\r\n        dispatch(fetchCollectionsSuccess(collectionsMap));\r\n        console.log(\"==========>>>><<<===========\");\r\n        console.log(collectionsMap)\r\n      })\r\n      .catch(error => dispatch(fetchCollectionsFailure(error.message)));\r\n  };\r\n};\r\n\r\n//about onSnapShot method \r\n  // ALTERNATIVE METHOD : : onSnapshot method \r\n      // The listener can be cancelled by calling the function that is returned when onSnapshot is called.\r\n      // @return\r\n      // An unsubscribe function that can be called to cancel the snapshot listener.\r\n      //   "]},"metadata":{},"sourceType":"module"}