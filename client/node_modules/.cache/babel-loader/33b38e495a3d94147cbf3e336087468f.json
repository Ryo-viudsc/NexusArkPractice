{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyBXXI5LJ4Tq8DPxSkkDrbaMPR5o4ymutnQ\",\n  authDomain: \"clothesec-60551.firebaseapp.com\",\n  projectId: \"clothesec-60551\",\n  storageBucket: \"clothesec-60551.appspot.com\",\n  messagingSenderId: \"908735053209\",\n  appId: \"1:908735053209:web:48bb42d8ff7761b9776708\",\n  measurementId: \"G-K59NZCY2WX\"\n}; //take the user auth  object and take it into the database \n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) {\n    return;\n  }\n\n  const userRef = firestore.doc(`user/${userAuth.uid}`);\n  const snapShot = await userRef.get(); //checking if the userRef (with userAUthid's data) exists\n\n  if (!snapShot.exists) {\n    //snapshot simply represents the data \n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date(); //if not using ref data and desconstruct the displayname and \n    //email\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log(error.message);\n    }\n  }\n\n  return userRef; //getting the snapshopshot using documentReference object and its methods \n};\nexport const addCollectionAndDocuments = (collectionKey, objectToAdd) => {\n  const collectionRef = firestore.collection(collectionKey); // console.log(collectionRef);\n  //firebase will make collectionRef for us \n  /////////////////////just to upload the data file to the cloud //////////////\n  // const batch = firestore.batch();\n  // objectToAdd.forEach(obj => {\n  //     const newDocRef = collectionRef.doc(obj.title);\n  //     console.log(newDocRef);\n  //     batch.set(newDocRef,obj );\n  // })\n  // batch.commit();\n  //@return\n  // A Promise resolved once all of the \n  // writes in the batch have been \n  // successfully written to the backend as \n  //an atomic unit. Note that it won't resolve while you're offline.\n};\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data(); //Encodes a text string as a valid Uniform Resource Identifier (URI)\n\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  console.log(transformedCollection);\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {}); //the result will be \n  //accumulator : {\n  // hats : hatsCollection : [......],\n  //  shoes : shoesCollection : [.....],\n  //etc \n};\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["C:/Users/bskki/AWSamp_GraphQL Udemy/crwn-clothing/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","addCollectionAndDocuments","collectionKey","objectToAdd","collectionRef","collection","convertCollectionsSnapshotToMap","collections","transformedCollection","docs","map","title","items","data","routeName","encodeURI","toLowerCase","id","reduce","accumulator","initializeApp","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\n\r\n\r\nconst config = {\r\n  apiKey: \"AIzaSyBXXI5LJ4Tq8DPxSkkDrbaMPR5o4ymutnQ\",\r\n  authDomain: \"clothesec-60551.firebaseapp.com\",\r\n  projectId: \"clothesec-60551\",\r\n  storageBucket: \"clothesec-60551.appspot.com\",\r\n  messagingSenderId: \"908735053209\",\r\n  appId: \"1:908735053209:web:48bb42d8ff7761b9776708\",\r\n  measurementId: \"G-K59NZCY2WX\"\r\n};\r\n\r\n//take the user auth  object and take it into the database \r\n\r\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\r\n\r\n  if(!userAuth){\r\n    return; \r\n  }\r\n  \r\n  const userRef = firestore.doc(`user/${userAuth.uid}`);\r\n  const snapShot = await userRef.get();\r\n  \r\n  //checking if the userRef (with userAUthid's data) exists\r\n  if(!snapShot.exists){\r\n    //snapshot simply represents the data \r\n    const {displayName, email} = userAuth;\r\n    const createdAt = new Date();\r\n  \r\n    //if not using ref data and desconstruct the displayname and \r\n    //email\r\n    try {\r\n\r\n      await userRef.set({\r\n        displayName,\r\n        email,\r\n        createdAt,\r\n        ...additionalData\r\n      });\r\n\r\n    } catch (error){\r\n      console.log(error.message);\r\n    }\r\n  }\r\n\r\n  return userRef;\r\n\r\n //getting the snapshopshot using documentReference object and its methods \r\n\r\n}\r\n\r\n\r\nexport const addCollectionAndDocuments = (collectionKey, objectToAdd) => {\r\n    const collectionRef = firestore.collection(collectionKey);\r\n   // console.log(collectionRef);\r\n    //firebase will make collectionRef for us \r\n\r\n    /////////////////////just to upload the data file to the cloud //////////////\r\n    // const batch = firestore.batch();\r\n    // objectToAdd.forEach(obj => {\r\n    //     const newDocRef = collectionRef.doc(obj.title);\r\n    //     console.log(newDocRef);\r\n    //     batch.set(newDocRef,obj );\r\n\r\n    // })\r\n\r\n        // batch.commit();\r\n    //@return\r\n    // A Promise resolved once all of the \r\n    // writes in the batch have been \r\n    // successfully written to the backend as \r\n    //an atomic unit. Note that it won't resolve while you're offline.\r\n}\r\n\r\n\r\nexport const convertCollectionsSnapshotToMap = (collections) => {\r\n\r\n  const transformedCollection = collections.docs.map(doc => {\r\n    const {title, items} = doc.data();\r\n    \r\n    //Encodes a text string as a valid Uniform Resource Identifier (URI)\r\n    return {\r\n      routeName : encodeURI(title.toLowerCase()),\r\n      id: doc.id, \r\n      title,\r\n      items\r\n    }\r\n  })\r\n\r\n  console.log(transformedCollection);\r\n\r\n return transformedCollection.reduce((accumulator, collection) => {\r\n    accumulator[collection.title.toLowerCase()] = collection;\r\n    return accumulator;\r\n  }, {})\r\n\r\n  //the result will be \r\n  //accumulator : {\r\n   // hats : hatsCollection : [......],\r\n  //  shoes : shoesCollection : [.....],\r\n  //etc \r\n\r\n}\r\n\r\nfirebase.initializeApp(config);\r\n\r\nexport const auth = firebase.auth();\r\nexport const firestore = firebase.firestore();\r\n\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\nprovider.setCustomParameters({prompt: 'select_account'});\r\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\r\n\r\nexport default firebase;\r\n"]},"metadata":{},"sourceType":"module"}