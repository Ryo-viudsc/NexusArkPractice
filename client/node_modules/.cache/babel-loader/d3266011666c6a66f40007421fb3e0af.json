{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\bskki\\\\AWSamp_GraphQL Udemy\\\\crwn-clothing\\\\src\\\\components\\\\cart\\\\cart-dropdown\\\\cart-dropdown.component.jsx\";\nimport React from 'react';\nimport CustomButton from '../../custom-button/custom-button.component';\nimport CartItem from '../../cart-item/cart-item.component';\nimport './cart-dropdown.styles.scss';\nimport { connect } from 'react-redux';\nimport { selectCartItems } from '../../../redux/cart/cart.selectors';\nimport { createStructuredSelector } from 'reselect';\nimport { withRouter } from 'react-router-dom';\nimport { toggleCartHidden } from '../../../redux/cart/cart.actions'; //destructure the cartItems from the props of the current component\n\nconst CartDropdown = ({\n  cartItems,\n  hovered,\n  history,\n  dispatch\n}) => {\n  console.log(\"rendeeeeeered \" + hovered);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: hovered ? {\n      display: 'block'\n    } : {\n      display: 'none'\n    },\n    className: \"cart-dropdown\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cart-items\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), cartItems.length ? cartItems.map(cartItem => /*#__PURE__*/_jsxDEV(CartItem, {\n      item: cartItem\n    }, cartItem.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 11\n    }, this)) : /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"emtpy-message\",\n      children: \"Your cart is empty\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(CustomButton, {\n      onClick: () => {\n        history.push('/checkout');\n        dispatch(toggleCartHidden());\n      },\n      children: \"GO TO CHECKOUT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n}; //this way, cart dropdown component \n//won't get re-rendered whenever some changes that are unrelated to the cart component happens \n\n\n_c = CartDropdown;\n\nconst mapStateToProps = state => ({\n  cartItems: selectCartItems\n}); //reselect is literary \"reselecting\" the existing variable \n//and re-use it instead of calucating multiple times \n//OR \n// const mapStateToProps = state =>({\n//     cartItems : state.cart.cartItems\n// })\n//NOTE: but this one gets re-render everytime the state changes \n\n\nexport default withRouter(connect(mapStateToProps)(CartDropdown)); //if we don't supply the second argument, \n//connect atcually passes the dispatch into the prop \n\nvar _c;\n\n$RefreshReg$(_c, \"CartDropdown\");","map":{"version":3,"sources":["C:/Users/bskki/AWSamp_GraphQL Udemy/crwn-clothing/src/components/cart/cart-dropdown/cart-dropdown.component.jsx"],"names":["React","CustomButton","CartItem","connect","selectCartItems","createStructuredSelector","withRouter","toggleCartHidden","CartDropdown","cartItems","hovered","history","dispatch","console","log","display","length","map","cartItem","id","push","mapStateToProps","state"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,6CAAzB;AACA,OAAOC,QAAP,MAAqB,qCAArB;AACA,OAAO,6BAAP;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,eAAR,QAA8B,oCAA9B;AACA,SAAQC,wBAAR,QAAuC,UAAvC;AACA,SAAQC,UAAR,QAAyB,kBAAzB;AACA,SAAQC,gBAAR,QAA+B,kCAA/B,C,CAGA;;AACA,MAAMC,YAAY,GAAG,CAAC;AAACC,EAAAA,SAAD;AAAYC,EAAAA,OAAZ;AAAqBC,EAAAA,OAArB;AAA8BC,EAAAA;AAA9B,CAAD,KAA6C;AAIhEC,EAAAA,OAAO,CAACC,GAAR,CAAY,mBAAmBJ,OAA/B;AACA,sBACE;AACE,IAAA,KAAK,EAAGA,OAAO,GAAE;AAACK,MAAAA,OAAO,EAAC;AAAT,KAAF,GAAqB;AAAEA,MAAAA,OAAO,EAAG;AAAZ,KADtC;AAEE,IAAA,SAAS,EAAC,eAFZ;AAAA,4BAGE;AAAK,MAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,YAHF,EAKIN,SAAS,CAACO,MAAV,GACCP,SAAS,CAACQ,GAAV,CAAcC,QAAQ,iBACrB,QAAC,QAAD;AAA4B,MAAA,IAAI,EAAEA;AAAlC,OAAeA,QAAQ,CAACC,EAAxB;AAAA;AAAA;AAAA;AAAA,YADD,CADD,gBAKA;AAAM,MAAA,SAAS,EAAC,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAVJ,eAYE,QAAC,YAAD;AACA,MAAA,OAAO,EAAE,MAAI;AACDR,QAAAA,OAAO,CAACS,IAAR,CAAa,WAAb;AACAR,QAAAA,QAAQ,CAACL,gBAAgB,EAAjB,CAAR;AACX,OAJD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAZF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAuBD,CA5BD,C,CA8BA;AACA;;;KA/BMC,Y;;AAgCN,MAAMa,eAAe,GAAIC,KAAD,KAAY;AAClCb,EAAAA,SAAS,EAAGL;AADsB,CAAZ,CAAxB,C,CAIA;AACA;AAIA;AACA;AACA;AACA;AACA;;;AAIA,eAAeE,UAAU,CAACH,OAAO,CAACkB,eAAD,CAAP,CAAyBb,YAAzB,CAAD,CAAzB,C,CACA;AACA","sourcesContent":["import React from 'react';\r\nimport CustomButton from '../../custom-button/custom-button.component';\r\nimport CartItem from '../../cart-item/cart-item.component';\r\nimport './cart-dropdown.styles.scss';\r\nimport {connect} from 'react-redux';\r\nimport {selectCartItems} from '../../../redux/cart/cart.selectors';\r\nimport {createStructuredSelector} from 'reselect';\r\nimport {withRouter} from 'react-router-dom';\r\nimport {toggleCartHidden} from '../../../redux/cart/cart.actions';\r\n\r\n\r\n//destructure the cartItems from the props of the current component\r\nconst CartDropdown = ({cartItems, hovered, history, dispatch}) => {\r\n  \r\n  \r\n\r\n  console.log(\"rendeeeeeered \" + hovered);\r\n  return(\r\n    <div \r\n      style={ hovered? {display:'block'}: { display : 'none'} }\r\n      className='cart-dropdown'>\r\n      <div className='cart-items' />\r\n      {\r\n        cartItems.length ? \r\n        (cartItems.map(cartItem => (\r\n          <CartItem key={cartItem.id} item={cartItem}/>\r\n          )))\r\n        : \r\n        <span className='emtpy-message'>Your cart is empty</span>  \r\n      }\r\n      <CustomButton \r\n      onClick={()=>{\r\n                  history.push('/checkout');\r\n                  dispatch(toggleCartHidden());\r\n      }}\r\n      > \r\n       GO TO CHECKOUT\r\n      </CustomButton>\r\n    </div>\r\n    )\r\n}\r\n\r\n//this way, cart dropdown component \r\n//won't get re-rendered whenever some changes that are unrelated to the cart component happens \r\nconst mapStateToProps = (state) => ({\r\n  cartItems : selectCartItems,\r\n\r\n});\r\n//reselect is literary \"reselecting\" the existing variable \r\n//and re-use it instead of calucating multiple times \r\n\r\n\r\n\r\n//OR \r\n// const mapStateToProps = state =>({\r\n//     cartItems : state.cart.cartItems\r\n// })\r\n//NOTE: but this one gets re-render everytime the state changes \r\n\r\n\r\n\r\nexport default withRouter(connect(mapStateToProps)(CartDropdown)); \r\n//if we don't supply the second argument, \r\n//connect atcually passes the dispatch into the prop \r\n"]},"metadata":{},"sourceType":"module"}