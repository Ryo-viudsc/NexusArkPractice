{"ast":null,"code":"import _toConsumableArray from\"C:/Users/bskki/AWSamp_GraphQL Udemy/crwn-clothing/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"C:/Users/bskki/AWSamp_GraphQL Udemy/crwn-clothing/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";//utility functions allows us to keep our \n//files clean and organize functions that \n//we may need in multiple files in one location \n//this is for users to add the same items multiple times \nexport var addItemToCart=function addItemToCart(cartItems,cartItemToAdd){//if item is not found, the cart item will be \"undefined\"   \nvar existingCartItem=cartItems.find(function(cartItem){return cartItem.id===cartItemToAdd.id;});if(existingCartItem){//note: \n//map function actually changes the state \nreturn cartItems.map(function(cartItem){return cartItem.id===cartItemToAdd.id?_objectSpread(_objectSpread({},cartItem),{},{quantity:cartItem.quantity+1}):cartItem;});}//if existingCartItem is \"undefined\" \nreturn[].concat(_toConsumableArray(cartItems),[_objectSpread(_objectSpread({},cartItemToAdd),{},{quantity:1})]);};export var removeItemFromCart=function removeItemFromCart(cartItems,cartItemToRemove){var existingCartItem=cartItems.find(function(cartItem){return cartItem.id===cartItemToRemove.id;});//if the curren item to remove is the last one,\n//then, just filter out the cartItems to \n//eliminate just the current item using its id \nif(existingCartItem.quantity===1){return cartItems.filter(function(cartItem){return cartItem.id!==cartItemToRemove.id;});};return cartItems.map(function(cartItem){return cartItem.id===cartItemToRemove.id?_objectSpread(_objectSpread({},cartItem),{},{quantity:cartItem.quantity-1}):cartItem;});};","map":{"version":3,"sources":["C:/Users/bskki/AWSamp_GraphQL Udemy/crwn-clothing/client/src/redux/cart/cart.utils.js"],"names":["addItemToCart","cartItems","cartItemToAdd","existingCartItem","find","cartItem","id","map","quantity","removeItemFromCart","cartItemToRemove","filter"],"mappings":"qWAAA;AACA;AACA;AAEA;AACA,MAAO,IAAMA,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACC,SAAD,CAAYC,aAAZ,CAA8B,CAEzD;AACA,GAAMC,CAAAA,gBAAgB,CAAGF,SAAS,CAACG,IAAV,CACrB,SAAAC,QAAQ,QAAIA,CAAAA,QAAQ,CAACC,EAAT,GAAgBJ,aAAa,CAACI,EAAlC,EADa,CAAzB,CAIE,GAAGH,gBAAH,CAAqB,CACjB;AACA;AACA,MAAOF,CAAAA,SAAS,CAACM,GAAV,CAAc,SAAAF,QAAQ,QACvBA,CAAAA,QAAQ,CAACC,EAAT,GAAgBJ,aAAa,CAACI,EAA9B,gCACMD,QADN,MACgBG,QAAQ,CAAEH,QAAQ,CAACG,QAAT,CAAkB,CAD5C,GAEEH,QAHqB,EAAtB,CAAP,CAKH,CAED;AACA,mCAAWJ,SAAX,kCAA0BC,aAA1B,MAAyCM,QAAQ,CAAE,CAAnD,KACH,CAnBM,CAqBP,MAAO,IAAMC,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAACR,SAAD,CAAYS,gBAAZ,CAAiC,CAEjE,GAAMP,CAAAA,gBAAgB,CAAGF,SAAS,CAACG,IAAV,CAAe,SAAAC,QAAQ,QAAIA,CAAAA,QAAQ,CAACC,EAAT,GAAgBI,gBAAgB,CAACJ,EAArC,EAAvB,CAAzB,CAEA;AACA;AACA;AACA,GAAGH,gBAAgB,CAACK,QAAjB,GAA8B,CAAjC,CAAoC,CAChC,MAAOP,CAAAA,SAAS,CAACU,MAAV,CAAiB,SAAAN,QAAQ,QAAIA,CAAAA,QAAQ,CAACC,EAAT,GAAgBI,gBAAgB,CAACJ,EAArC,EAAzB,CAAP,CACH,EAED,MAAOL,CAAAA,SAAS,CAACM,GAAV,CACL,SAAAF,QAAQ,QACRA,CAAAA,QAAQ,CAACC,EAAT,GAAgBI,gBAAgB,CAACJ,EAAjC,gCACID,QADJ,MACcG,QAAQ,CAAGH,QAAQ,CAACG,QAAT,CAAmB,CAD5C,GAEEH,QAHM,EADH,CAAP,CAMD,CAjBM","sourcesContent":["//utility functions allows us to keep our \r\n//files clean and organize functions that \r\n//we may need in multiple files in one location \r\n\r\n//this is for users to add the same items multiple times \r\nexport const addItemToCart = (cartItems, cartItemToAdd) => {\r\n\r\n  //if item is not found, the cart item will be \"undefined\"   \r\n  const existingCartItem = cartItems.find( \r\n      cartItem => cartItem.id === cartItemToAdd.id\r\n      );\r\n\r\n    if(existingCartItem) {\r\n        //note: \r\n        //map function actually changes the state \r\n        return cartItems.map(cartItem => \r\n              cartItem.id === cartItemToAdd.id\r\n              ? {...cartItem, quantity: cartItem.quantity+1}\r\n              : cartItem \r\n          );\r\n    } \r\n\r\n    //if existingCartItem is \"undefined\" \r\n    return [...cartItems, {...cartItemToAdd, quantity: 1}]; \r\n};\r\n\r\nexport const removeItemFromCart = (cartItems, cartItemToRemove) => {\r\n\r\n  const existingCartItem = cartItems.find(cartItem => cartItem.id === cartItemToRemove.id);\r\n\r\n  //if the curren item to remove is the last one,\r\n  //then, just filter out the cartItems to \r\n  //eliminate just the current item using its id \r\n  if(existingCartItem.quantity === 1) {\r\n      return cartItems.filter(cartItem => cartItem.id !== cartItemToRemove.id)\r\n  };\r\n\r\n  return cartItems.map(  \r\n    cartItem => \r\n    cartItem.id === cartItemToRemove.id ?\r\n    {...cartItem, quantity : cartItem.quantity -1}\r\n    : cartItem\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}