{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/bskki/AWSamp_GraphQL Udemy/crwn-clothing/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _objectSpread from\"C:/Users/bskki/AWSamp_GraphQL Udemy/crwn-clothing/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _asyncToGenerator from\"C:/Users/bskki/AWSamp_GraphQL Udemy/crwn-clothing/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import firebase from'firebase/app';import'firebase/firestore';import'firebase/auth';var config={apiKey:\"AIzaSyBXXI5LJ4Tq8DPxSkkDrbaMPR5o4ymutnQ\",authDomain:\"clothesec-60551.firebaseapp.com\",projectId:\"clothesec-60551\",storageBucket:\"clothesec-60551.appspot.com\",messagingSenderId:\"908735053209\",appId:\"1:908735053209:web:48bb42d8ff7761b9776708\",measurementId:\"G-K59NZCY2WX\"};//take the user auth  object and take it into the database \nexport var createUserProfileDocument=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(userAuth,additionalData){var userRef,snapShot,displayName,email,createdAt;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(userAuth){_context.next=2;break;}return _context.abrupt(\"return\");case 2:userRef=firestore.doc(\"user/\".concat(userAuth.uid));_context.next=5;return userRef.get();case 5:snapShot=_context.sent;if(snapShot.exists){_context.next=17;break;}//snapshot simply represents the data \ndisplayName=userAuth.displayName,email=userAuth.email;createdAt=new Date();//if not using ref data and desconstruct the displayname and \n//email\n_context.prev=9;_context.next=12;return userRef.set(_objectSpread({displayName:displayName,email:email,createdAt:createdAt},additionalData));case 12:_context.next=17;break;case 14:_context.prev=14;_context.t0=_context[\"catch\"](9);console.log(_context.t0.message);case 17:return _context.abrupt(\"return\",userRef);case 18:case\"end\":return _context.stop();}}},_callee,null,[[9,14]]);}));return function createUserProfileDocument(_x,_x2){return _ref.apply(this,arguments);};}();export var addCollectionAndDocuments=function addCollectionAndDocuments(collectionKey,objectToAdd){var collectionRef=firestore.collection(collectionKey);// console.log(collectionRef);\n//firebase will make collectionRef for us \n/////////////////////just to upload the data file to the cloud //////////////\n// const batch = firestore.batch();\n// objectToAdd.forEach(obj => {\n//     const newDocRef = collectionRef.doc(obj.title);\n//     console.log(newDocRef);\n//     batch.set(newDocRef,obj );\n// })\n// batch.commit();\n//@return\n// A Promise resolved once all of the \n// writes in the batch have been \n// successfully written to the backend as \n//an atomic unit. Note that it won't resolve while you're offline.\n};export var convertCollectionsSnapshotToMap=function convertCollectionsSnapshotToMap(collections){var transformedCollection=collections.docs.map(function(doc){var _doc$data=doc.data(),title=_doc$data.title,items=_doc$data.items;//Encodes a text string as a valid Uniform Resource Identifier (URI)\nreturn{routeName:encodeURI(title.toLowerCase()),id:doc.id,title:title,items:items};});console.log(transformedCollection);return transformedCollection.reduce(function(accumulator,collection){accumulator[collection.title.toLowerCase()]=collection;return accumulator;},{});//the result will be \n//accumulator : {\n// hats : hatsCollection : [......],\n//  shoes : shoesCollection : [.....],\n//etc \n};firebase.initializeApp(config);export var auth=firebase.auth();export var firestore=firebase.firestore();var provider=new firebase.auth.GoogleAuthProvider();provider.setCustomParameters({prompt:'select_account'});export var signInWithGoogle=function signInWithGoogle(){return auth.signInWithPopup(provider);};export default firebase;","map":{"version":3,"sources":["C:/Users/bskki/AWSamp_GraphQL Udemy/crwn-clothing/client/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","get","snapShot","exists","displayName","email","createdAt","Date","set","console","log","message","addCollectionAndDocuments","collectionKey","objectToAdd","collectionRef","collection","convertCollectionsSnapshotToMap","collections","transformedCollection","docs","map","data","title","items","routeName","encodeURI","toLowerCase","id","reduce","accumulator","initializeApp","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\n\r\n\r\nconst config = {\r\n  apiKey: \"AIzaSyBXXI5LJ4Tq8DPxSkkDrbaMPR5o4ymutnQ\",\r\n  authDomain: \"clothesec-60551.firebaseapp.com\",\r\n  projectId: \"clothesec-60551\",\r\n  storageBucket: \"clothesec-60551.appspot.com\",\r\n  messagingSenderId: \"908735053209\",\r\n  appId: \"1:908735053209:web:48bb42d8ff7761b9776708\",\r\n  measurementId: \"G-K59NZCY2WX\"\r\n};\r\n\r\n//take the user auth  object and take it into the database \r\n\r\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\r\n\r\n  if(!userAuth){\r\n    return; \r\n  }\r\n  \r\n  const userRef = firestore.doc(`user/${userAuth.uid}`);\r\n  const snapShot = await userRef.get();\r\n  \r\n  //checking if the userRef (with userAUthid's data) exists\r\n  if(!snapShot.exists){\r\n    //snapshot simply represents the data \r\n    const {displayName, email} = userAuth;\r\n    const createdAt = new Date();\r\n  \r\n    //if not using ref data and desconstruct the displayname and \r\n    //email\r\n    try {\r\n\r\n      await userRef.set({\r\n        displayName,\r\n        email,\r\n        createdAt,\r\n        ...additionalData\r\n      });\r\n\r\n    } catch (error){\r\n      console.log(error.message);\r\n    }\r\n  }\r\n\r\n  return userRef;\r\n\r\n //getting the snapshopshot using documentReference object and its methods \r\n\r\n}\r\n\r\n\r\nexport const addCollectionAndDocuments = (collectionKey, objectToAdd) => {\r\n    const collectionRef = firestore.collection(collectionKey);\r\n   // console.log(collectionRef);\r\n    //firebase will make collectionRef for us \r\n\r\n    /////////////////////just to upload the data file to the cloud //////////////\r\n    // const batch = firestore.batch();\r\n    // objectToAdd.forEach(obj => {\r\n    //     const newDocRef = collectionRef.doc(obj.title);\r\n    //     console.log(newDocRef);\r\n    //     batch.set(newDocRef,obj );\r\n\r\n    // })\r\n\r\n        // batch.commit();\r\n    //@return\r\n    // A Promise resolved once all of the \r\n    // writes in the batch have been \r\n    // successfully written to the backend as \r\n    //an atomic unit. Note that it won't resolve while you're offline.\r\n}\r\n\r\n\r\nexport const convertCollectionsSnapshotToMap = (collections) => {\r\n\r\n  const transformedCollection = collections.docs.map(doc => {\r\n    const {title, items} = doc.data();\r\n    \r\n    //Encodes a text string as a valid Uniform Resource Identifier (URI)\r\n    return {\r\n      routeName : encodeURI(title.toLowerCase()),\r\n      id: doc.id, \r\n      title,\r\n      items\r\n    }\r\n  })\r\n\r\n  console.log(transformedCollection);\r\n\r\n return transformedCollection.reduce((accumulator, collection) => {\r\n    accumulator[collection.title.toLowerCase()] = collection;\r\n    return accumulator;\r\n  }, {})\r\n\r\n  //the result will be \r\n  //accumulator : {\r\n   // hats : hatsCollection : [......],\r\n  //  shoes : shoesCollection : [.....],\r\n  //etc \r\n\r\n}\r\n\r\nfirebase.initializeApp(config);\r\n\r\nexport const auth = firebase.auth();\r\nexport const firestore = firebase.firestore();\r\n\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\nprovider.setCustomParameters({prompt: 'select_account'});\r\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\r\n\r\nexport default firebase;\r\n"]},"metadata":{},"sourceType":"module"}