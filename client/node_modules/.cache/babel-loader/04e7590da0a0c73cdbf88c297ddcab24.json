{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\bskki\\\\AWSamp_GraphQL Udemy\\\\crwn-clothing\\\\src\\\\components\\\\cart\\\\cart-dropdown\\\\cart-dropdown.component.jsx\";\nimport React from 'react';\nimport CustomButton from '../../custom-button/custom-button.component';\nimport CartItem from '../../cart-item/cart-item.component';\nimport './cart-dropdown.styles.scss';\nimport { connect } from 'react-redux';\nimport { selectCartItems } from '../../../redux/cart/cart.selectors';\nimport { createStructuredSelector } from 'reselect';\nimport { withRouter } from 'react-router-dom';\nimport { toggleCartHidden, hoverCartHidden } from '../../../redux/cart/cart.actions'; //destructure the cartItems from the props of the current component\n\nconst CartDropdown = ({\n  cartItems,\n  history,\n  dispatch\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onMouseEnter: dispatch(hoverCartHidden()) // onMouseLeave={dispatch(hoverCartHidden())}  \n    ,\n    className: \"cart-dropdown\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cart-items\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this), cartItems.length ? cartItems.map(cartItem => /*#__PURE__*/_jsxDEV(CartItem, {\n      item: cartItem\n    }, cartItem.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 11\n    }, this)) : /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"emtpy-message\",\n      children: \"Your cart is empty\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(CustomButton, {\n      onClick: () => {\n        history.push('/checkout');\n        dispatch(toggleCartHidden());\n      },\n      children: \"GO TO CHECKOUT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n}; //this way, cart dropdown component \n//won't get re-rendered whenever some changes that are unrelated to the cart component happens \n\n\n_c = CartDropdown;\nconst mapStateToProps = createStructuredSelector({\n  cartItems: selectCartItems\n}); //reselect is literary \"reselecting\" the existing variable \n//and re-use it instead of calucating multiple times \n\nconst mapDispatchToProps = dispatch => {\n  hoverCartHidden: () => dispatch(hoverCartHidden());\n}; //OR \n// const mapStateToProps = state =>({\n//     cartItems : state.cart.cartItems\n// })\n//NOTE: but this one gets re-render everytime the state changes \n\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(CartDropdown)); //if we don't supply the second argument, \n//connect atcually passes the dispatch into the prop \n\nvar _c;\n\n$RefreshReg$(_c, \"CartDropdown\");","map":{"version":3,"sources":["C:/Users/bskki/AWSamp_GraphQL Udemy/crwn-clothing/src/components/cart/cart-dropdown/cart-dropdown.component.jsx"],"names":["React","CustomButton","CartItem","connect","selectCartItems","createStructuredSelector","withRouter","toggleCartHidden","hoverCartHidden","CartDropdown","cartItems","history","dispatch","length","map","cartItem","id","push","mapStateToProps","mapDispatchToProps"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,6CAAzB;AACA,OAAOC,QAAP,MAAqB,qCAArB;AACA,OAAO,6BAAP;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,eAAR,QAA8B,oCAA9B;AACA,SAAQC,wBAAR,QAAuC,UAAvC;AACA,SAAQC,UAAR,QAAyB,kBAAzB;AACA,SAAQC,gBAAR,EAA0BC,eAA1B,QAAgD,kCAAhD,C,CAGA;;AACA,MAAMC,YAAY,GAAG,CAAC;AAACC,EAAAA,SAAD;AAAYC,EAAAA,OAAZ;AAAqBC,EAAAA;AAArB,CAAD,KAAoC;AAEvD,sBACE;AACI,IAAA,YAAY,EAAEA,QAAQ,CAACJ,eAAe,EAAhB,CAD1B,CAEG;AAFH;AAGE,IAAA,SAAS,EAAC,eAHZ;AAAA,4BAIE;AAAK,MAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,YAJF,EAMIE,SAAS,CAACG,MAAV,GACCH,SAAS,CAACI,GAAV,CAAcC,QAAQ,iBACrB,QAAC,QAAD;AAA4B,MAAA,IAAI,EAAEA;AAAlC,OAAeA,QAAQ,CAACC,EAAxB;AAAA;AAAA;AAAA;AAAA,YADD,CADD,gBAKA;AAAM,MAAA,SAAS,EAAC,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAXJ,eAaE,QAAC,YAAD;AAAc,MAAA,OAAO,EAAE,MAAI;AACfL,QAAAA,OAAO,CAACM,IAAR,CAAa,WAAb;AACAL,QAAAA,QAAQ,CAACL,gBAAgB,EAAjB,CAAR;AACX,OAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAbF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAsBD,CAxBD,C,CA0BA;AACA;;;KA3BME,Y;AA4BN,MAAMS,eAAe,GAAGb,wBAAwB,CAAC;AAC/CK,EAAAA,SAAS,EAAGN;AADmC,CAAD,CAAhD,C,CAGA;AACA;;AAEA,MAAMe,kBAAkB,GAAIP,QAAD,IAAc;AACvCJ,EAAAA,eAAe,EAAG,MAAOI,QAAQ,CAACJ,eAAe,EAAhB,CAAf;AACnB,CAFD,C,CAKA;AACA;AACA;AACA;AACA;;;AAIA,eAAeF,UAAU,CAACH,OAAO,CAACe,eAAD,EAAkBC,kBAAlB,CAAP,CAA6CV,YAA7C,CAAD,CAAzB,C,CACA;AACA","sourcesContent":["import React from 'react';\r\nimport CustomButton from '../../custom-button/custom-button.component';\r\nimport CartItem from '../../cart-item/cart-item.component';\r\nimport './cart-dropdown.styles.scss';\r\nimport {connect} from 'react-redux';\r\nimport {selectCartItems} from '../../../redux/cart/cart.selectors';\r\nimport {createStructuredSelector} from 'reselect';\r\nimport {withRouter} from 'react-router-dom';\r\nimport {toggleCartHidden, hoverCartHidden} from '../../../redux/cart/cart.actions';\r\n\r\n\r\n//destructure the cartItems from the props of the current component\r\nconst CartDropdown = ({cartItems, history, dispatch}) => {\r\n\r\n  return(\r\n    <div \r\n        onMouseEnter={dispatch(hoverCartHidden())}\r\n       // onMouseLeave={dispatch(hoverCartHidden())}  \r\n      className='cart-dropdown'>\r\n      <div className='cart-items' />\r\n      {\r\n        cartItems.length ? \r\n        (cartItems.map(cartItem => (\r\n          <CartItem key={cartItem.id} item={cartItem}/>\r\n          )))\r\n        : \r\n        <span className='emtpy-message'>Your cart is empty</span>  \r\n      }\r\n      <CustomButton onClick={()=>{\r\n                  history.push('/checkout');\r\n                  dispatch(toggleCartHidden());\r\n      }}> \r\n       GO TO CHECKOUT\r\n      </CustomButton>\r\n    </div>\r\n    )\r\n}\r\n\r\n//this way, cart dropdown component \r\n//won't get re-rendered whenever some changes that are unrelated to the cart component happens \r\nconst mapStateToProps = createStructuredSelector({\r\n  cartItems : selectCartItems\r\n}) \r\n//reselect is literary \"reselecting\" the existing variable \r\n//and re-use it instead of calucating multiple times \r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  hoverCartHidden : ()  => dispatch(hoverCartHidden())\r\n};\r\n\r\n\r\n//OR \r\n// const mapStateToProps = state =>({\r\n//     cartItems : state.cart.cartItems\r\n// })\r\n//NOTE: but this one gets re-render everytime the state changes \r\n\r\n\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(CartDropdown)); \r\n//if we don't supply the second argument, \r\n//connect atcually passes the dispatch into the prop \r\n"]},"metadata":{},"sourceType":"module"}