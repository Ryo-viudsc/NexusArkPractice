{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\bskki\\\\AWSamp_GraphQL Udemy\\\\crwn-clothing\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport './App.css';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport LandingPage from \"./pages/landingpage/landing.page.component\";\nimport HomePage from './pages/homepage/homepage.component';\nimport ShopPage from './pages/shop/shop.component';\nimport CheckoutPage from './pages/checkout/checkout.component';\nimport SignInAndSignUpPage from './pages/sign-in-and-sign-up/sign-in-and-sign-up';\nimport Header from './components/header/header.component';\nimport { auth, createUserProfileDocument //addCollectionAndDocuments\n} from \"./firebase/firebase.utils\"; // import { SnapshotViewIOS } from 'react-native';\n//we wanna use auth credentials through this root \n\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect'; //we want action to pass into dispatch / setCurrentUser is action object that accepts the payload and return the actionType\n\nimport { setCurrentUser } from './redux/user/user.actions';\nimport { selectCurrentUser } from './redux/user/user.selector';\nimport { selectCollectionsForPreview } from './redux/shop/shop.selectors';\nimport styled from 'styled-components'; // const Text = styled.div`\n//border : ${({isActive}) => isActive ? `1px` : `3px green border`}\n// `;\n//inside, write <Text isActive> </Text>\n//notice that Header is outside of the Switch \n//this way, react router doesn't have to re-render \n//everytime the switch is executed\n\nconst App = ({\n  setCurrentUser,\n  currentUser\n}) => {\n  _s();\n\n  useEffect(() => {\n    const unsubscribeFromAuth = auth.onAuthStateChanged(async userAuth => {\n      if (userAuth) {\n        const userRef = await createUserProfileDocument(userAuth); //to check if the database has any updates in the userAuth\n        //you need the onsnapShot to listen to \n        //the update of the database \n        //for the comopnentDidMount of the entire app\n\n        userRef.onSnapshot(snapShot => {\n          setCurrentUser({\n            id: snapShot.id,\n            ...snapShot.data()\n          });\n        }); //end of if(userAuth) we also want to know \n        //if the user is sign-ined in or not as well \n\n        setCurrentUser(userAuth);\n      }\n    });\n    return function cleanup() {\n      unsubscribeFromAuth();\n    };\n  }, [setCurrentUser]);\n  console.log(currentUser, \"here\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Switch, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: \"/\",\n        component: LandingPage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/shop\",\n        component: ShopPage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: \"/checkout\",\n        component: CheckoutPage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: \"/signin\",\n        render: () => currentUser ? /*#__PURE__*/_jsxDEV(Redirect, {\n          to: \"/\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 27\n        }, this) : /*#__PURE__*/_jsxDEV(SignInAndSignUpPage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 27\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 8\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 6\n  }, this);\n}; //without \"exact\" keyword, \n//if that is just path\n//then anything starts with '/', \n//it also gets rendered \n\n\n_s(App, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = App;\nconst mapStateToProps = createStructuredSelector({\n  currentUser: selectCurrentUser //collectionsArray : selectCollectionsForPreview\n\n}); //dispatch accepts the actionState with payload(user)\n//fire off the reducer accoring to the action.type\n//user parameter will be whatever \n//setCurrentUser will accept as paramter like setCurrentUser(param)\n\nconst mapDispatchToProps = dispatch => ({\n  setCurrentUser: user => dispatch(setCurrentUser(user))\n}); //remember set currrent user looks like this\n// export const setCurrentUser = user => ({\n//   type: 'SET_CURRENT_USER',\n//   payload: user\n// });\n///////////////////////////////////////////////\n//also in the root reducer file\n// import userReducer from './user/user.reducer';\n// export default combineReducers({\n//   user: userReducer\n// });\n/////dispatch/////////////////////////////////////////\n// const userReducer = (state = INITIAL_STATE, action) => {\n//   switch (action.type) {\n//     case 'SET_CURRENT_USER':\n//       return {\n//         ...state,\n//         currentUser: action.payload\n//       };\n//     default:\n//       return state;\n//   }\n// };\n//in this app component, we don't need the state so \n//there's no need to put the mapStateToProps\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/bskki/AWSamp_GraphQL Udemy/crwn-clothing/src/App.js"],"names":["React","useEffect","Switch","Route","Redirect","LandingPage","HomePage","ShopPage","CheckoutPage","SignInAndSignUpPage","Header","auth","createUserProfileDocument","connect","createStructuredSelector","setCurrentUser","selectCurrentUser","selectCollectionsForPreview","styled","App","currentUser","unsubscribeFromAuth","onAuthStateChanged","userAuth","userRef","onSnapshot","snapShot","id","data","cleanup","console","log","mapStateToProps","mapDispatchToProps","dispatch","user"],"mappings":"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","sourcesContent":["import React, {useEffect} from 'react';\r\nimport './App.css';\r\n\r\nimport {  Switch, Route, Redirect } from 'react-router-dom';\r\nimport LandingPage from \"./pages/landingpage/landing.page.component\";\r\nimport HomePage from './pages/homepage/homepage.component';\r\nimport ShopPage from './pages/shop/shop.component';\r\nimport CheckoutPage from './pages/checkout/checkout.component';\r\nimport SignInAndSignUpPage from './pages/sign-in-and-sign-up/sign-in-and-sign-up';\r\nimport Header from './components/header/header.component';\r\nimport {\r\n        auth, \r\n        createUserProfileDocument, \r\n        //addCollectionAndDocuments\r\n  } from \"./firebase/firebase.utils\";\r\n// import { SnapshotViewIOS } from 'react-native';\r\n//we wanna use auth credentials through this root \r\nimport { connect } from 'react-redux';\r\nimport {createStructuredSelector} from 'reselect';\r\n\r\n\r\n//we want action to pass into dispatch / setCurrentUser is action object that accepts the payload and return the actionType\r\nimport { setCurrentUser } from './redux/user/user.actions';\r\nimport { selectCurrentUser } from './redux/user/user.selector';\r\nimport { selectCollectionsForPreview} from './redux/shop/shop.selectors';\r\n\r\n\r\nimport styled from 'styled-components';\r\n\r\n// const Text = styled.div`\r\n    //border : ${({isActive}) => isActive ? `1px` : `3px green border`}\r\n// `;\r\n//inside, write <Text isActive> </Text>\r\n\r\n//notice that Header is outside of the Switch \r\n//this way, react router doesn't have to re-render \r\n//everytime the switch is executed\r\nconst App = ({setCurrentUser, currentUser}) => {\r\n \r\n   \r\n   useEffect(() => {\r\n     const unsubscribeFromAuth = auth.onAuthStateChanged(async userAuth => {\r\n      if(userAuth){\r\n        const userRef = await createUserProfileDocument(userAuth);\r\n        //to check if the database has any updates in the userAuth\r\n        //you need the onsnapShot to listen to \r\n        //the update of the database \r\n        //for the comopnentDidMount of the entire app\r\n         userRef.onSnapshot(snapShot => {\r\n          setCurrentUser({\r\n                id : snapShot.id,\r\n                ...snapShot.data()\r\n          });\r\n        });\r\n       //end of if(userAuth) we also want to know \r\n       //if the user is sign-ined in or not as well \r\n        setCurrentUser(userAuth);\r\n      }});\r\n\r\n      return function cleanup () {\r\n          unsubscribeFromAuth();\r\n      }\r\n\r\n   },[setCurrentUser]);\r\n    \r\n   console.log(currentUser,\"here\")\r\n\r\n    return (\r\n     <div> \r\n      <Header />\r\n      <Switch>\r\n       <Route exact path='/' component={LandingPage} />\r\n       <Route path='/shop' component={ShopPage} />\r\n       <Route exact path='/checkout' component={CheckoutPage} />\r\n       <Route exact path='/signin' \r\n               render={() => \r\n                       currentUser\r\n                       ? (<Redirect to='/' />)\r\n                       : (<SignInAndSignUpPage />)} />\r\n       </Switch>\r\n     </div>\r\n   )\r\n}\r\n//without \"exact\" keyword, \r\n//if that is just path\r\n//then anything starts with '/', \r\n//it also gets rendered \r\n\r\n\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    currentUser: selectCurrentUser,\r\n    //collectionsArray : selectCollectionsForPreview\r\n});\r\n\r\n//dispatch accepts the actionState with payload(user)\r\n//fire off the reducer accoring to the action.type\r\n//user parameter will be whatever \r\n//setCurrentUser will accept as paramter like setCurrentUser(param)\r\nconst mapDispatchToProps = dispatch => ({\r\n  setCurrentUser: user => dispatch(setCurrentUser(user))\r\n});\r\n\r\n//remember set currrent user looks like this\r\n// export const setCurrentUser = user => ({\r\n//   type: 'SET_CURRENT_USER',\r\n//   payload: user\r\n// });\r\n///////////////////////////////////////////////\r\n//also in the root reducer file\r\n// import userReducer from './user/user.reducer';\r\n// export default combineReducers({\r\n//   user: userReducer\r\n// });\r\n/////dispatch/////////////////////////////////////////\r\n\r\n// const userReducer = (state = INITIAL_STATE, action) => {\r\n//   switch (action.type) {\r\n//     case 'SET_CURRENT_USER':\r\n//       return {\r\n//         ...state,\r\n//         currentUser: action.payload\r\n//       };\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n\r\n\r\n\r\n//in this app component, we don't need the state so \r\n//there's no need to put the mapStateToProps\r\nexport default connect(mapStateToProps,mapDispatchToProps)(App);"]},"metadata":{},"sourceType":"module"}