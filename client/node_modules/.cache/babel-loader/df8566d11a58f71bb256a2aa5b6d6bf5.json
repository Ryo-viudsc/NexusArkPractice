{"ast":null,"code":"import ShopActionTypes from './shop.types';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\nexport const fetchCollectionsStart = collectionsMap => ({\n  type: ShopActionTypes.UPDATE_COLLECTIONS\n});\nexport const fetchCollectionsSuccess = collectionsMap => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_SUCCESS,\n  payload: collectionsMap\n});\nexport const fetchCollectionsFailure = errorMessage => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_FAILURE,\n  payload: errorMessage\n}); //all thunks are similar to mapDispatchToProps \n//meaning it is a function that accepts the action function \n//and the action function accepts theaction object \n//when the thunk is fired off, \n// it invokes the dispatch with the action function and the action object \n\nexport const fetchCollectionStartAsync = () => {\n  return dispatch => {\n    const CollectionRef = firestore.collection('collections');\n    fetch(fetchCollectionsStart()); //once the asynchrnous is resolved\n\n    CollectionRef.get().then(snapshot => {\n      const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n      dispatch(fetchCollectionsSuccess(collectionsMap));\n    }).catch(error => dispatch(fetchCollectionsFailure(error.message)));\n  };\n}; //about onSnapShot method \n// ALTERNATIVE METHOD : : onSnapshot method \n// The listener can be cancelled by calling the function that is returned when onSnapshot is called.\n// @return\n// An unsubscribe function that can be called to cancel the snapshot listener.\n//","map":{"version":3,"sources":["C:/Users/bskki/AWSamp_GraphQL Udemy/crwn-clothing/src/redux/shop/shop.actions.js"],"names":["ShopActionTypes","firestore","convertCollectionsSnapshotToMap","fetchCollectionsStart","collectionsMap","type","UPDATE_COLLECTIONS","fetchCollectionsSuccess","FETCH_COLLECTIONS_SUCCESS","payload","fetchCollectionsFailure","errorMessage","FETCH_COLLECTIONS_FAILURE","fetchCollectionStartAsync","dispatch","CollectionRef","collection","fetch","get","then","snapshot","catch","error","message"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,cAA5B;AACA,SAAQC,SAAR,EAAmBC,+BAAnB,QAAyD,+BAAzD;AAGA,OAAO,MAAMC,qBAAqB,GAAIC,cAAD,KAAqB;AACxDC,EAAAA,IAAI,EAAEL,eAAe,CAACM;AADkC,CAArB,CAA9B;AAKP,OAAO,MAAMC,uBAAuB,GAAIH,cAAD,KAAqB;AACxDC,EAAAA,IAAI,EAAGL,eAAe,CAACQ,yBADiC;AAExDC,EAAAA,OAAO,EAAGL;AAF8C,CAArB,CAAhC;AAKP,OAAO,MAAMM,uBAAuB,GAAGC,YAAY,KAAK;AACpDN,EAAAA,IAAI,EAAEL,eAAe,CAACY,yBAD8B;AAEpDH,EAAAA,OAAO,EAAGE;AAF0C,CAAL,CAA5C,C,CAMP;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAME,yBAAyB,GAAG,MAAM;AAC3C,SAAOC,QAAQ,IAAI;AACjB,UAAMC,aAAa,GAAGd,SAAS,CAACe,UAAV,CAAqB,aAArB,CAAtB;AAEAC,IAAAA,KAAK,CAACd,qBAAqB,EAAtB,CAAL,CAHiB,CAMjB;;AACAY,IAAAA,aAAa,CAACG,GAAd,GAAoBC,IAApB,CAAyBC,QAAQ,IAAI;AACnC,YAAMhB,cAAc,GAAGF,+BAA+B,CAACkB,QAAD,CAAtD;AAEAN,MAAAA,QAAQ,CAACP,uBAAuB,CAACH,cAAD,CAAxB,CAAR;AAED,KALD,EAKGiB,KALH,CAKSC,KAAK,IAAIR,QAAQ,CAACJ,uBAAuB,CAACY,KAAK,CAACC,OAAP,CAAxB,CAL1B;AAMD,GAbD;AAcH,CAfM,C,CAoBP;AACE;AACI;AACA;AACA;AACA","sourcesContent":["import ShopActionTypes from './shop.types';\r\nimport {firestore, convertCollectionsSnapshotToMap} from '../../firebase/firebase.utils';\r\n\r\n\r\nexport const fetchCollectionsStart = (collectionsMap) => ({\r\n  type: ShopActionTypes.UPDATE_COLLECTIONS\r\n});\r\n\r\n\r\nexport const fetchCollectionsSuccess = (collectionsMap) => ({\r\n    type : ShopActionTypes.FETCH_COLLECTIONS_SUCCESS,\r\n    payload : collectionsMap\r\n});\r\n\r\nexport const fetchCollectionsFailure = errorMessage => ({\r\n    type: ShopActionTypes.FETCH_COLLECTIONS_FAILURE,\r\n    payload : errorMessage\r\n})\r\n\r\n\r\n//all thunks are similar to mapDispatchToProps \r\n//meaning it is a function that accepts the action function \r\n//and the action function accepts theaction object \r\n//when the thunk is fired off, \r\n// it invokes the dispatch with the action function and the action object \r\n\r\nexport const fetchCollectionStartAsync = () => {\r\n    return dispatch => {\r\n      const CollectionRef = firestore.collection('collections');\r\n\r\n      fetch(fetchCollectionsStart())\r\n\r\n\r\n      //once the asynchrnous is resolved\r\n      CollectionRef.get().then(snapshot => {\r\n        const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\r\n\r\n        dispatch(fetchCollectionsSuccess(collectionsMap));\r\n\r\n      }).catch(error => dispatch(fetchCollectionsFailure(error.message)))\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n//about onSnapShot method \r\n  // ALTERNATIVE METHOD : : onSnapshot method \r\n      // The listener can be cancelled by calling the function that is returned when onSnapshot is called.\r\n      // @return\r\n      // An unsubscribe function that can be called to cancel the snapshot listener.\r\n      //   "]},"metadata":{},"sourceType":"module"}