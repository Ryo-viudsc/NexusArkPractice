{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\bskki\\\\AWSamp_GraphQL Udemy\\\\crwn-clothing\\\\client\\\\src\\\\components\\\\cart\\\\cart-dropdown\\\\cart-dropdown.component.jsx\";\nimport React, { useState } from 'react';\nimport CustomButton from '../../custom-button/custom-button.component';\nimport CartItem from '../../cart-item/cart-item.component';\nimport './cart-dropdown.styles.scss';\nimport { connect } from 'react-redux';\nimport { selectCartItems } from '../../../redux/cart/cart.selectors';\nimport { createStructuredSelector } from 'reselect';\nimport { withRouter } from 'react-router-dom';\nimport { toggleCartHidden } from '../../../redux/cart/cart.actions'; //https://jsfiddle.net/sergdenisov/3dyxb5g4/1/\n//destructure the cartItems from the props of the current component\n\nconst CartDropdown = ({\n  cartItems,\n  history,\n  dispatch\n}) => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cart-dropdown\",\n      children: [/*#__PURE__*/_jsxDEV(CustomButton, {\n        className: \"checkout-button\",\n        onClick: () => {\n          history.push('/checkout');\n          dispatch(toggleCartHidden());\n        },\n        children: \"CHECKOUT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cart-items\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 7\n      }, this), cartItems.length ? cartItems.map(cartItem => /*#__PURE__*/_jsxDEV(CartItem, {\n        item: cartItem\n      }, cartItem.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 11\n      }, this)) : /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"emtpy-message\",\n        children: \"Your cart is empty\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => {\n          dispatch(toggleCartHidden());\n        },\n        className: \"close-dropdown\",\n        children: \"CLOSE \\u2715\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 10\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n}; //this way, cart dropdown component \n//won't get re-rendered whenever some changes that are unrelated to the cart component happens \n\n\n_c = CartDropdown;\nconst mapStateToProps = createStructuredSelector({\n  cartItems: selectCartItems\n}); //reselect is literary \"reselecting\" the existing variable \n//and re-use it instead of calucating multiple times \n//OR \n// const mapStateToProps = state =>({\n//     cartItems : state.cart.cartItems\n// })\n//NOTE: but this one gets re-render everytime the state changes \n\nexport default withRouter(connect(mapStateToProps)(CartDropdown)); //if we don't supply the second argument, \n//connect atcually passes the dispatch into the prop \n\nvar _c;\n\n$RefreshReg$(_c, \"CartDropdown\");","map":{"version":3,"sources":["C:/Users/bskki/AWSamp_GraphQL Udemy/crwn-clothing/client/src/components/cart/cart-dropdown/cart-dropdown.component.jsx"],"names":["React","useState","CustomButton","CartItem","connect","selectCartItems","createStructuredSelector","withRouter","toggleCartHidden","CartDropdown","cartItems","history","dispatch","push","length","map","cartItem","id","mapStateToProps"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,YAAP,MAAyB,6CAAzB;AACA,OAAOC,QAAP,MAAqB,qCAArB;AACA,OAAO,6BAAP;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,eAAR,QAA8B,oCAA9B;AACA,SAAQC,wBAAR,QAAuC,UAAvC;AACA,SAAQC,UAAR,QAAyB,kBAAzB;AACA,SAAQC,gBAAR,QAA+B,kCAA/B,C,CAGA;AACA;;AACA,MAAMC,YAAY,GAAG,CAAC;AAACC,EAAAA,SAAD;AAAYC,EAAAA,OAAZ;AAAqBC,EAAAA;AAArB,CAAD,KAAoC;AAEvD,sBACE;AAAA,2BACA;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA,8BACA,QAAC,YAAD;AACc,QAAA,SAAS,EAAC,iBADxB;AAEc,QAAA,OAAO,EAAE,MAAI;AACbD,UAAAA,OAAO,CAACE,IAAR,CAAa,WAAb;AACAD,UAAAA,QAAQ,CAACJ,gBAAgB,EAAjB,CAAR;AACX,SALH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADA,eASE;AAAK,QAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,cATF,EAWIE,SAAS,CAACI,MAAV,GACCJ,SAAS,CAACK,GAAV,CAAcC,QAAQ,iBACrB,QAAC,QAAD;AAA4B,QAAA,IAAI,EAAEA;AAAlC,SAAeA,QAAQ,CAACC,EAAxB;AAAA;AAAA;AAAA;AAAA,cADD,CADD,gBAKA;AAAM,QAAA,SAAS,EAAC,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAhBJ,eAkBK;AACG,QAAA,OAAO,EAAE,MAAI;AACXL,UAAAA,QAAQ,CAACJ,gBAAgB,EAAjB,CAAR;AAA6B,SAFlC;AAGG,QAAA,SAAS,EAAC,gBAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAlBL;AAAA;AAAA;AAAA;AAAA;AAAA;AADA,mBADF;AA+BD,CAjCD,C,CAmCA;AACA;;;KApCMC,Y;AAqCN,MAAMS,eAAe,GAAGZ,wBAAwB,CAAC;AAC/CI,EAAAA,SAAS,EAAGL;AADmC,CAAD,CAAhD,C,CAGA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA,eAAeE,UAAU,CAACH,OAAO,CAACc,eAAD,CAAP,CAAyBT,YAAzB,CAAD,CAAzB,C,CACA;AACA","sourcesContent":["import React, {useState} from 'react';\r\nimport CustomButton from '../../custom-button/custom-button.component';\r\nimport CartItem from '../../cart-item/cart-item.component';\r\nimport './cart-dropdown.styles.scss';\r\nimport {connect} from 'react-redux';\r\nimport {selectCartItems} from '../../../redux/cart/cart.selectors';\r\nimport {createStructuredSelector} from 'reselect';\r\nimport {withRouter} from 'react-router-dom';\r\nimport {toggleCartHidden} from '../../../redux/cart/cart.actions';\r\n\r\n\r\n//https://jsfiddle.net/sergdenisov/3dyxb5g4/1/\r\n//destructure the cartItems from the props of the current component\r\nconst CartDropdown = ({cartItems, history, dispatch}) => {\r\n\r\n  return(\r\n    <>\r\n    <div className='cart-dropdown'>\r\n    <CustomButton \r\n                  className='checkout-button'\r\n                  onClick={()=>{\r\n                  history.push('/checkout');\r\n                  dispatch(toggleCartHidden());\r\n      }}> \r\n      CHECKOUT</CustomButton>\r\n \r\n      <div className='cart-items' />\r\n      {\r\n        cartItems.length ? \r\n        (cartItems.map(cartItem => (\r\n          <CartItem key={cartItem.id} item={cartItem}/>\r\n          )))\r\n        : \r\n        <span className='emtpy-message'>Your cart is empty</span>  \r\n      } \r\n         <div  \r\n            onClick={()=>{\r\n              dispatch(toggleCartHidden())}}\r\n            className='close-dropdown' > \r\n              CLOSE &#10005;\r\n          </div>\r\n   \r\n    </div>\r\n\r\n    </>\r\n    )\r\n}\r\n\r\n//this way, cart dropdown component \r\n//won't get re-rendered whenever some changes that are unrelated to the cart component happens \r\nconst mapStateToProps = createStructuredSelector({\r\n  cartItems : selectCartItems\r\n}) \r\n//reselect is literary \"reselecting\" the existing variable \r\n//and re-use it instead of calucating multiple times \r\n\r\n//OR \r\n// const mapStateToProps = state =>({\r\n//     cartItems : state.cart.cartItems\r\n// })\r\n//NOTE: but this one gets re-render everytime the state changes \r\n\r\nexport default withRouter(connect(mapStateToProps)(CartDropdown)); \r\n//if we don't supply the second argument, \r\n//connect atcually passes the dispatch into the prop \r\n"]},"metadata":{},"sourceType":"module"}