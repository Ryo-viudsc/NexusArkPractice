{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\bskki\\\\AWSamp_GraphQL Udemy\\\\crwn-clothing\\\\src\\\\pages\\\\shop\\\\shop.component.jsx\";\nimport React, { Component } from 'react';\nimport CollectionsOverview from '../../components/collections-overview/collections-overview.component';\nimport { Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport WithSpinner from '../../components/with-spinner/with-spinner.component';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\nimport { updateCollections } from '../../redux/shop/shop.actions';\nimport CollectionPage from '../collections/collections.component'; //this is what selectShopItems looks like : \n// export const selectShopItems = createSelector(\n//   [selectShop],\n//   shop => shop.selectItems\n// );\n\nconst CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\n_c = CollectionsOverviewWithSpinner;\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage); //we want to selectively render the nested root \n//one root takes us to the overview only when the path has '/shop'\n//the other root takes us to the /shop.:category\n\n_c2 = CollectionPageWithSpinner;\n\nclass ShopPage extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: true\n    };\n    this.unsubscribeFromSnapshot = null;\n  }\n\n  //note : firestore.collection is the method to fetch the reference of whatever comes in the ('')  \n  componentDidMount() {\n    const {\n      updateCollections\n    } = this.props;\n    const CollectionRef = firestore.collection('collections');\n    console.log(CollectionRef); //onSnapshot method \n    //The listener can be cancelled by calling the function that is returned when onSnapshot is called.\n    //@return\n    //An unsubscribe function that can be called to cancel the snapshot listener.\n\n    this.unsubscribeFromSnapshot = CollectionRef.onSnapshot(async snapshot => {\n      const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n      updateCollections(collectionsMap); //grabbed the reducer from the redux \n\n      this.setState({\n        isLoading: false\n      });\n    });\n  } // you \n\n\n  render() {\n    const {\n      match\n    } = this.props; //we need this loading state when we render the component \n\n    const {\n      loading\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"shop-page\",\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: `${match.path}`,\n          render: props => /*#__PURE__*/_jsxDEV(CollectionsOverviewWithSpinner, {\n            isLoading: isLoading,\n            ...props\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 67\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: `${match.path}/:collectionId`,\n          component: CollectionPage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n  updateCollections: collectionsMap => dispatch(updateCollections(collectionsMap))\n});\n\nexport default connect(null, mapDispatchToProps)(ShopPage);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CollectionsOverviewWithSpinner\");\n$RefreshReg$(_c2, \"CollectionPageWithSpinner\");","map":{"version":3,"sources":["C:/Users/bskki/AWSamp_GraphQL Udemy/crwn-clothing/src/pages/shop/shop.component.jsx"],"names":["React","Component","CollectionsOverview","Route","connect","WithSpinner","firestore","convertCollectionsSnapshotToMap","updateCollections","CollectionPage","CollectionsOverviewWithSpinner","CollectionPageWithSpinner","ShopPage","state","loading","unsubscribeFromSnapshot","componentDidMount","props","CollectionRef","collection","console","log","onSnapshot","snapshot","collectionsMap","setState","isLoading","render","match","path","mapDispatchToProps","dispatch"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,mBAAP,MAAgC,sEAAhC;AACA,SAAQC,KAAR,QAAoB,kBAApB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AAEA,OAAOC,WAAP,MAAwB,sDAAxB;AAEA,SAAQC,SAAR,EAAmBC,+BAAnB,QAAyD,+BAAzD;AACA,SAAQC,iBAAR,QAAgC,+BAAhC;AACA,OAAOC,cAAP,MAA2B,sCAA3B,C,CACA;AACA;AACA;AACA;AACA;;AAIA,MAAMC,8BAA8B,GAAGL,WAAW,CAACH,mBAAD,CAAlD;KAAMQ,8B;AACN,MAAMC,yBAAyB,GAAGN,WAAW,CAACI,cAAD,CAA7C,C,CAGA;AACA;AACA;;MALME,yB;;AAMN,MAAMC,QAAN,SAAuBZ,KAAK,CAACC,SAA7B,CAAsC;AAAA;AAAA;AAAA,SAGnCY,KAHmC,GAG3B;AACNC,MAAAA,OAAO,EAAG;AADJ,KAH2B;AAAA,SAQpCC,uBARoC,GAQV,IARU;AAAA;;AAUpC;AACAC,EAAAA,iBAAiB,GAAE;AACf,UAAM;AAACR,MAAAA;AAAD,QAAsB,KAAKS,KAAjC;AAEA,UAAMC,aAAa,GAAGZ,SAAS,CAACa,UAAV,CAAqB,aAArB,CAAtB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,aAAZ,EAJe,CAMf;AACA;AACA;AACA;;AACA,SAAKH,uBAAL,GAAgCG,aAAa,CAACI,UAAd,CAAyB,MAAMC,QAAN,IAAkB;AACzE,YAAMC,cAAc,GAAGjB,+BAA+B,CAACgB,QAAD,CAAtD;AACAf,MAAAA,iBAAiB,CAACgB,cAAD,CAAjB,CAFyE,CAEtC;;AACnC,WAAKC,QAAL,CAAc;AAACC,QAAAA,SAAS,EAAG;AAAb,OAAd;AACD,KAJ+B,CAAhC;AAMH,GA3BmC,CA8BpC;;;AACAC,EAAAA,MAAM,GAAE;AAEN,UAAM;AAACC,MAAAA;AAAD,QAAU,KAAKX,KAArB,CAFM,CAGN;;AACA,UAAM;AAACH,MAAAA;AAAD,QAAY,KAAKD,KAAvB;AACA,wBAAO;AAAA,6BACH;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA,gCACE,QAAC,KAAD;AAAO,UAAA,KAAK,MAAZ;AAAa,UAAA,IAAI,EAAG,GAAEe,KAAK,CAACC,IAAK,EAAjC;AAAqC,UAAA,MAAM,EAAGZ,KAAD,iBAAW,QAAC,8BAAD;AAAgC,YAAA,SAAS,EAAES,SAA3C;AAAA,eAA0DT;AAA1D;AAAA;AAAA;AAAA;AAAA;AAAxD;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,KAAD;AAAO,UAAA,IAAI,EAAG,GAAEW,KAAK,CAACC,IAAK,gBAA3B;AAA6C,UAAA,SAAS,EAAEpB;AAAxD;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADG,qBAAP;AAMD;;AA1CmC;;AA8CtC,MAAMqB,kBAAkB,GAAGC,QAAQ,KAAK;AACpCvB,EAAAA,iBAAiB,EAAGgB,cAAc,IAAIO,QAAQ,CAACvB,iBAAiB,CAACgB,cAAD,CAAlB;AADV,CAAL,CAAnC;;AAGA,eAAepB,OAAO,CAAE,IAAF,EAAQ0B,kBAAR,CAAP,CAAmClB,QAAnC,CAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport CollectionsOverview from '../../components/collections-overview/collections-overview.component';\r\nimport {Route} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\n\r\nimport WithSpinner from '../../components/with-spinner/with-spinner.component';\r\n\r\nimport {firestore, convertCollectionsSnapshotToMap} from '../../firebase/firebase.utils';\r\nimport {updateCollections} from '../../redux/shop/shop.actions';\r\nimport CollectionPage from '../collections/collections.component';\r\n//this is what selectShopItems looks like : \r\n// export const selectShopItems = createSelector(\r\n//   [selectShop],\r\n//   shop => shop.selectItems\r\n// );\r\n\r\n\r\n\r\nconst CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\r\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\r\n\r\n\r\n//we want to selectively render the nested root \r\n//one root takes us to the overview only when the path has '/shop'\r\n//the other root takes us to the /shop.:category\r\nclass ShopPage extends React.Component{\r\n  \r\n   //you could omit the constructor for state \r\n   state = {\r\n     loading : true\r\n   };\r\n    \r\n  \r\n  unsubscribeFromSnapshot = null;\r\n\r\n  //note : firestore.collection is the method to fetch the reference of whatever comes in the ('')  \r\n  componentDidMount(){\r\n      const {updateCollections} = this.props;\r\n\r\n      const CollectionRef = firestore.collection('collections');\r\n      console.log(CollectionRef);\r\n      \r\n      //onSnapshot method \r\n      //The listener can be cancelled by calling the function that is returned when onSnapshot is called.\r\n      //@return\r\n      //An unsubscribe function that can be called to cancel the snapshot listener.\r\n      this.unsubscribeFromSnapshot =  CollectionRef.onSnapshot(async snapshot => {\r\n        const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\r\n        updateCollections(collectionsMap); //grabbed the reducer from the redux \r\n        this.setState({isLoading : false});\r\n      })\r\n      \r\n  }\r\n  \r\n\r\n  // you \r\n  render(){  \r\n  \r\n    const {match} = this.props;\r\n    //we need this loading state when we render the component \r\n    const {loading} = this.state; \r\n    return(<>\r\n        <div className=\"shop-page\">\r\n          <Route exact path={`${match.path}`}  render={(props) => <CollectionsOverviewWithSpinner isLoading={isLoading} {...props}/> } />                 \r\n          <Route path={`${match.path}/:collectionId`}  component={CollectionPage} />                 \r\n        </div> \r\n      </>)\r\n  }\r\n}\r\n\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    updateCollections : collectionsMap => dispatch(updateCollections(collectionsMap))\r\n});\r\nexport default connect (null, mapDispatchToProps)(ShopPage); "]},"metadata":{},"sourceType":"module"}