{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\bskki\\\\AWSamp_GraphQL Udemy\\\\crwn-clothing\\\\src\\\\pages\\\\shop\\\\shop.component.jsx\";\nimport React, { Component } from 'react';\nimport CollectionsOverview from '../../components/collections-overview/collections-overview.component';\nimport { Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport WithSpinner from '../../components/with-spinner/with-spinner.component';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\nimport { updateCollections } from '../../redux/shop/shop.actions';\nimport CollectionPage from '../collections/collections.component'; //this is what selectShopItems looks like : \n// export const selectShopItems = createSelector(\n//   [selectShop],\n//   shop => shop.selectItems\n// );\n\nimport { fetchCollectionStartAsync } from '../../redux/shop/shop.actions';\nimport { createStructuredSelector } from 'reselect';\nimport { selectIsCollectionFetching } from '../../redux/shop/shop.selectors';\nconst CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\n_c = CollectionsOverviewWithSpinner;\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage); //we want to selectively render the nested root \n//one root takes us to the overview only when the path has '/shop'\n//the other root takes us to the /shop.:category\n\n_c2 = CollectionPageWithSpinner;\n\nclass ShopPage extends React.Component {\n  //you could omit the constructor for state \n  //  state = {\n  //    loading : true\n  //  };\n  // unsubscribeFromSnapshot = null;\n  //note : firestore.collection is the method to fetch the reference of whatever comes in the ('')  \n  componentDidMount() {\n    const {\n      fetchCollectionStartAsync\n    } = this.props;\n    fetchCollectionStartAsync(); //     const {updateCollections} = this.props;\n    //      // //MAIN METHOD : : fetch method \n    //     // fetch('https://firestore.googleapis.com/v1/projects/clothesec-60551/databases/(default)/documents/collections')\n    //     // .then(responce => responce.json())\n    //     // .then(collections => console.log(collections))\n  }\n\n  render() {\n    const {\n      match,\n      isCollectionFetching\n    } = this.props; // //we need this loading state when we render the component \n    // const {loading} = this.state; \n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"shop-page\",\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: `${match.path}`,\n          render: props => /*#__PURE__*/_jsxDEV(CollectionsOverviewWithSpinner, {\n            isLoading: isCollectionFetching,\n            ...props\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 65\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: `${match.path}/:collectionId`,\n          render: props => /*#__PURE__*/_jsxDEV(CollectionPageWithSpinner, {\n            isLoading: isCollectionFetching,\n            ...props\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 73\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  }\n\n}\n\nconst mapStateToProps = createStructuredSelector({\n  selectIsCollectionFetching: selectIsCollectionFetching\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchCollectionStartAsync: () => dispatch(fetchCollectionStartAsync())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShopPage);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CollectionsOverviewWithSpinner\");\n$RefreshReg$(_c2, \"CollectionPageWithSpinner\");","map":{"version":3,"sources":["C:/Users/bskki/AWSamp_GraphQL Udemy/crwn-clothing/src/pages/shop/shop.component.jsx"],"names":["React","Component","CollectionsOverview","Route","connect","WithSpinner","firestore","convertCollectionsSnapshotToMap","updateCollections","CollectionPage","fetchCollectionStartAsync","createStructuredSelector","selectIsCollectionFetching","CollectionsOverviewWithSpinner","CollectionPageWithSpinner","ShopPage","componentDidMount","props","render","match","isCollectionFetching","path","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,mBAAP,MAAgC,sEAAhC;AACA,SAAQC,KAAR,QAAoB,kBAApB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AAEA,OAAOC,WAAP,MAAwB,sDAAxB;AAEA,SAAQC,SAAR,EAAmBC,+BAAnB,QAAyD,+BAAzD;AACA,SAAQC,iBAAR,QAAgC,+BAAhC;AACA,OAAOC,cAAP,MAA2B,sCAA3B,C,CACA;AACA;AACA;AACA;AACA;;AAEA,SAAQC,yBAAR,QAAwC,+BAAxC;AACA,SAASC,wBAAT,QAAyC,UAAzC;AACA,SAAQC,0BAAR,QAAyC,iCAAzC;AAEA,MAAMC,8BAA8B,GAAGR,WAAW,CAACH,mBAAD,CAAlD;KAAMW,8B;AACN,MAAMC,yBAAyB,GAAGT,WAAW,CAACI,cAAD,CAA7C,C,CAGA;AACA;AACA;;MALMK,yB;;AAMN,MAAMC,QAAN,SAAuBf,KAAK,CAACC,SAA7B,CAAsC;AAEnC;AACD;AACA;AACA;AAGA;AAEA;AACAe,EAAAA,iBAAiB,GAAE;AAEjB,UAAM;AAAEN,MAAAA;AAAF,QAA+B,KAAKO,KAA1C;AACAP,IAAAA,yBAAyB,GAHR,CAMnB;AACA;AACA;AACA;AACA;AAGC;;AAEDQ,EAAAA,MAAM,GAAE;AAIL,UAAM;AAACC,MAAAA,KAAD;AAAQC,MAAAA;AAAR,QAAgC,KAAKH,KAA3C,CAJK,CAKN;AACA;;AACA,wBAAO;AAAA,6BACH;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA,gCACE,QAAC,KAAD;AAAO,UAAA,KAAK,MAAZ;AAAa,UAAA,IAAI,EAAG,GAAEE,KAAK,CAACE,IAAK,EAAjC;AAAqC,UAAA,MAAM,EAAEJ,KAAK,iBAAI,QAAC,8BAAD;AAAgC,YAAA,SAAS,EAAEG,oBAA3C;AAAA,eAAqEH;AAArE;AAAA;AAAA;AAAA;AAAA;AAAtD;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,KAAD;AAAO,UAAA,IAAI,EAAG,GAAEE,KAAK,CAACE,IAAK,gBAA3B;AAA6C,UAAA,MAAM,EAAEJ,KAAK,iBAAI,QAAC,yBAAD;AAA2B,YAAA,SAAS,EAAEG,oBAAtC;AAAA,eAAgEH;AAAhE;AAAA;AAAA;AAAA;AAAA;AAA9D;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADG,qBAAP;AAMD;;AAvCmC;;AA0CtC,MAAMK,eAAe,GAAGX,wBAAwB,CAAC;AAC/CC,EAAAA,0BAA0B,EAAGA;AADkB,CAAD,CAAhD;;AAIA,MAAMW,kBAAkB,GAAGC,QAAQ,KAAK;AACtCd,EAAAA,yBAAyB,EAAG,MAAMc,QAAQ,CAACd,yBAAyB,EAA1B;AADJ,CAAL,CAAnC;;AAGA,eAAeN,OAAO,CAAEkB,eAAF,EAAmBC,kBAAnB,CAAP,CAA8CR,QAA9C,CAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport CollectionsOverview from '../../components/collections-overview/collections-overview.component';\r\nimport {Route} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\n\r\nimport WithSpinner from '../../components/with-spinner/with-spinner.component';\r\n\r\nimport {firestore, convertCollectionsSnapshotToMap} from '../../firebase/firebase.utils';\r\nimport {updateCollections} from '../../redux/shop/shop.actions';\r\nimport CollectionPage from '../collections/collections.component';\r\n//this is what selectShopItems looks like : \r\n// export const selectShopItems = createSelector(\r\n//   [selectShop],\r\n//   shop => shop.selectItems\r\n// );\r\n\r\nimport {fetchCollectionStartAsync} from '../../redux/shop/shop.actions';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport {selectIsCollectionFetching} from '../../redux/shop/shop.selectors';\r\n\r\nconst CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\r\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\r\n\r\n\r\n//we want to selectively render the nested root \r\n//one root takes us to the overview only when the path has '/shop'\r\n//the other root takes us to the /shop.:category\r\nclass ShopPage extends React.Component{\r\n  \r\n   //you could omit the constructor for state \r\n  //  state = {\r\n  //    loading : true\r\n  //  };\r\n    \r\n  \r\n  // unsubscribeFromSnapshot = null;\r\n\r\n  //note : firestore.collection is the method to fetch the reference of whatever comes in the ('')  \r\n  componentDidMount(){\r\n\r\n    const { fetchCollectionStartAsync} = this.props;\r\n    fetchCollectionStartAsync();\r\n\r\n\r\n  //     const {updateCollections} = this.props;\r\n  //      // //MAIN METHOD : : fetch method \r\n  //     // fetch('https://firestore.googleapis.com/v1/projects/clothesec-60551/databases/(default)/documents/collections')\r\n  //     // .then(responce => responce.json())\r\n  //     // .then(collections => console.log(collections))\r\n\r\n      \r\n  }\r\n  \r\n  render(){  \r\n    \r\n\r\n\r\n     const {match, isCollectionFetching} = this.props;\r\n    // //we need this loading state when we render the component \r\n    // const {loading} = this.state; \r\n    return(<>\r\n        <div className=\"shop-page\">\r\n          <Route exact path={`${match.path}`}  render={props => <CollectionsOverviewWithSpinner isLoading={isCollectionFetching} {...props}/> } />                 \r\n          <Route path={`${match.path}/:collectionId`}  render={props => <CollectionPageWithSpinner isLoading={isCollectionFetching} {...props} /> } />                 \r\n        </div> \r\n      </>)\r\n  }\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  selectIsCollectionFetching : selectIsCollectionFetching\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  fetchCollectionStartAsync : () => dispatch(fetchCollectionStartAsync())\r\n});\r\nexport default connect (mapStateToProps, mapDispatchToProps)(ShopPage); "]},"metadata":{},"sourceType":"module"}